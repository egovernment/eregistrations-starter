'use strict';

var d             = require('d')
  , ee            = require('event-emitter')
  , eeUnify       = require('event-emitter/unify')
  , memoize       = require('memoizee/plain')
  , validDocument = require('dom-ext/html-document/valid-html-document')
  , makeElement   = require('dom-ext/document/#/make-element')

  , slice = Array.prototype.slice
  , getFactory, DocumentOverlay, Overlay
  , showInViewport, showInViewportOpts = { padding: 100 };

if (typeof $ !== 'undefined') showInViewport = $.showInViewport;

DocumentOverlay = function (document) {
	this.dom = document;
	this.makeDiv = makeElement.bind(document, 'dialog');
	document.addEventListener('click', this.onClick.bind(this), true);
};
Object.defineProperties(DocumentOverlay.prototype, {
	current: d(null),
	onClick: d(function (e) {
		var target;
		if (!this.current) return;
		target = e.target;
		if (target === this.current.dom) return;
		if (this.current.persistent) return;
		if (!(this.current.dom.compareDocumentPosition(target) & 16)) {
			this.hide(this.current);
		}
	}),
	show: d(function (overlay) {
		if (this.current === overlay) return;
		if (this.current) this.hide(this.current);
		overlay.dom.classList.remove('dialog-hidden');
		if (this.dom.body) this.dom.body.classList.remove('dialog-modal-off');
		if (overlay.curtain) {
			if (this.dom.body) this.dom.body.classList.add('dialog-modal-on');
		}
		overlay.dom.classList.add('dialog-visible');
		this.current = overlay;
		if (showInViewport) showInViewport(overlay.dom, showInViewportOpts);
		overlay.emit('show');
	}),
	hide: d(function (overlay) {
		if (this.current !== overlay) return;
		overlay.dom.classList.remove('dialog-visible');
		if (this.dom.body) {
			this.dom.body.classList.remove('dialog-modal-on');
			if (overlay.curtain) this.dom.body.classList.add('dialog-modal-off');
		}
		overlay.dom.classList.add('dialog-hidden');
		this.current = null;
		overlay.emit('hide');
	}),
	toggle: d(function (overlay) {
		if (this.current === overlay) this.hide(overlay);
		else this.show(overlay);
	}),
	create: d(function (/* options */) {
		var options = Object(arguments[0]), overlay, dom;
		overlay = new Overlay(this);
		overlay.curtain = (options.curtain != null) ? options.curtain : true;
		delete options.curtain;
		overlay.persistent = options.persistent;
		delete options.persistent;
		dom = overlay.dom = ee(this.makeDiv.apply(this, arguments));
		eeUnify(overlay, dom);
		dom.show = this.show.bind(this, overlay);
		dom.hide = this.hide.bind(this, overlay);
		dom.toggle = this.toggle.bind(this, overlay);

		if (!dom.classList.contains('dialog-visible')) {
			dom.classList.add('dialog-hidden');
		} else {
			if (this.current) this.hide(this.current);
			this.current = overlay;
		}
		return dom;

	})
});

Overlay = function (parent) { this.parent = parent; };
ee(Overlay.prototype);

exports = module.exports = function (document/*, â€¦args*/) {
	var factory, args;
	factory = getFactory(validDocument(document));
	args = slice.call(arguments, 1);
	return factory.create.apply(factory, args);
};

exports.getFactory = getFactory = memoize(function (document) {
	return new DocumentOverlay(document);
}, { normalizer: require('memoizee/normalizers/get-1')() });
