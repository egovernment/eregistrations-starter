'use strict';

var $            = require('./main')
  , elMain       = require('./element#/event')
  , onReady      = require('./on-ready')
  , elInDocument = require('./element-in-document')

  , links = {};

require('./element#/class');
require('./element#/get-by-class');

elMain.addEvent.call(window, 'hashchange', function () {
	var hash = location.hash, i, data;
	if (!hash) return;
	hash = hash.slice(1);
	if (!hash) return;
	if (!links.hasOwnProperty(hash)) return;
	for (i = 0; (data = links[hash][i]); ++i) {
		if (elInDocument(data.link)) {
			data.set(data.id, true);
			location.href = '#' + hash;
			break;
		}
	}
});

module.exports = $.tabs = function (nav, options) {
	var controlName, control, controls, i, doItem, map, link, id, hash, done
	  , count, first, active, set, optional, isLink, current;
	options = Object(options);
	optional = options.optional;
	map = {};
	hash = location.hash.slice(1);
	count = 0;
	controlName = options.controlName || 'li';
	nav = $(nav);
	if (typeof controlName === 'object') controls = nav.getByClass(controlName[0], controlName[1]);
	else controls = nav.getElementsByTagName(controlName);
	set = function (id, isExternal) {
		var i, nuUrl;
		if (map[id].control.hasClass('active')) {
			if (optional && !isExternal) {
				map[id].control.removeClass('active');
				map[id].content.removeClass('active');

				// Clear eventual hash from url
				if (map[id].content.id === id) {
					i = location.href.indexOf('#' + id);
					if (i === (location.href.length - id.length - 1)) {
						nuUrl = location.href.slice(location.protocol.length + 2 +
							location.host.length, i);
						setTimeout(function () {
							if (window.history) window.history.pushState({}, '', nuUrl);
							else location.hash = '';
						}, 0);
					}
				}
			}
		} else {
			map[id].control.addClass('active');
			map[id].content.addClass('active');
		}
		if (map[id].content.id === id) {
			map[id].content.id = id + '-fix-tab-scroll';
			setTimeout(function () { map[id].content.id = id; }, 50);
		}
		for (i in map) {
			if (!map.hasOwnProperty(i) || (i === id)) continue;
			map[i].control.removeClass('active');
			map[i].content.removeClass('active');
		}
		current = id;
	};
	doItem = function (id, control, link, isLink) {
		if (!first) first = id;
		++count;
		onReady(id, function (el) {
			map[id] = { control: control, content: el };
			if (isLink && (hash === id)) active = id;
			if (!active && control.hasClass('active')) active = id;
			link.addEvent('click', function (e) { set(id); });
			if (!--count && done) {
				if (active) set(active, true);
				else if (!optional) set(first, true);
			}
		});
	};
	for (i = 0; (control = controls[i]); ++i) {
		link = control.getElementsByTagName('a')[0];
		if (!link) continue;
		id = link.getAttribute('href');
		if (id) {
			if (id.charAt(0) !== '#') continue;
			id = id.slice(1);
			if (!links.hasOwnProperty(id)) links[id] = [];
			links[id].unshift({ link: link, id: id, set: set });
			isLink = true;
		} else {
			id = link.getAttribute('data-target');
			if (!id) continue;
			isLink = false;
		}
		if (id) doItem(id, $(control), $(link), isLink);
	}
	if (count) done = true;
	else if (active) set(active, true);
	else if (!optional) set(first, true);

	return {
		set: set,
		getCurrent: function () { return current; }
	};
};
