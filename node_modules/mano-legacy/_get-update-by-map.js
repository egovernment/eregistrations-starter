'use strict';

var once          = require('timers-ext/once')
  , $             = require('./main')
  , dispatch      = require('./dispatch-event')
  , getId         = require('./get-internal-id')
  , forIn         = require('./for-in')
  , resetControls = require('./reset-controls')

  , exclude = function (el) { el.exclude(); }
  , reset;

var include = function (el) {
	var preValue, inSelect = (el.nodeName.toLowerCase() === 'option') && el._domExtLocation;
	if (inSelect) preValue = el._domExtLocation.parentNode.value;
	el.include();
	if (inSelect) {
		if ((el._domExtLocation.parentNode.value) !== preValue) {
			dispatch(el._domExtLocation.parentNode, 'change');
		}
	}
};

var resetMarkVisible = function (el, id) {
	if (reset[id]) delete reset[id];
	else reset[id] = true;
};
var resetMarkHidden = function (el, id) {
	if (reset[id]) delete reset[id];
	else reset[id] = el;
};

var doReset = once(function () {
	var data = reset;
	reset = null;
	forIn(data, function (el) {
		if (el === true) return;
		resetControls(el);
	});
}, 50);

require('./element#/toggle');

module.exports = function (map) {
	return function (value) {
		var i, j, id, resolve, hide, show;

		resolve = function (id, method) {
			var el, internalId;
			if ((typeof id === 'string') && (id.charAt(0) === '!')) {
				id = id.slice(1);
				method = !method;
			}
			el = $(id);
			if (!el) return;
			if (method) {
				if (hide) {
					internalId = getId(el);
					delete hide[internalId];
				}
				if (!el._domExtLocation) return;
				if (el.nextSibling === el._domExtLocation) return;
				if (!show) show = {};
				if (!internalId) internalId = getId(el);
				show[internalId] = el;
			} else {
				if (show) {
					internalId = getId(el);
					if (show) delete show[internalId];
				}
				if (!el.parentNode) return;
				if (!hide) hide = {};
				if (!internalId) internalId = getId(el);
				hide[internalId] = el;
			}
		};
		for (i in map) {
			if (!map.hasOwnProperty(i) || (value === i)) continue;
			if ((typeof map[i] === 'string') || isNaN(map[i].length) ||
					map[i].nodeName) {
				resolve(map[i], false);
			} else {
				for (j = 0; (id = map[i][j]); ++j) resolve(id, false);
			}
		}
		if (map.hasOwnProperty(value)) {
			if ((typeof map[value] === 'string') || isNaN(map[value].length) ||
					map[value].nodeName) {
				resolve(map[value], true);
			} else {
				for (j = 0; (id = map[value][j]); ++j) resolve(id, true);
			}
		}
		if (hide || show) {
			if (!reset) reset = {};
			if (hide) forIn(hide, resetMarkVisible);
			if (show) forIn(show, resetMarkHidden);
			doReset();
		}
		if (hide) forIn(hide, exclude);
		if (show) forIn(show, include);
	};
};
