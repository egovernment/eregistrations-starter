'use strict';

var $       = require('./main')
  , onReady = require('./on-ready')

  , els = document.getElementsByTagName('*')
  , iterate, conf = {};

require('./element#/class');

$.live = exports.add = function (nodeName, attrName, attrValue, cb) {
	if (typeof attrName === 'function') {
		cb = attrName;
		attrName = null;
	} else if (typeof attrValue === 'function') {
		cb = attrValue;
		attrValue = null;
	}
	if (attrValue != null) attrValue = String(attrValue);
	if (typeof cb !== 'function') throw new Error("Missing configuration callback");
	if (!conf[nodeName]) conf[nodeName] = [];
	conf[nodeName].push(function (el) {
		var attr;
		if (attrName) {
			attr = el.getAttribute(attrName);
			if (!attr) return;
			if (attrValue != null) {
				if (attrValue !== attr) {
					if (attrName !== 'class') return;
					if (!$(el).hasClass(attrValue)) return;
				}
			}
		}
		onReady(el, function () { cb(el, attr); });
	});
};

iterate = function () {
	var i, j, el, name, cb;
	for (i = 0; (el = els[i]); ++i) {
		if (el['$mano legacyScanned']) continue;
		el['$mano legacyScanned'] = true;
		if (!el.getAttribute) continue;
		name = el.nodeName.toLowerCase();
		if (!conf[name]) continue;
		for (j = 0; (cb = conf[name][j]); ++j) cb(el);
	}
	if ($.legacyScannerTimeout) setTimeout(iterate, $.legacyScannerTimeout);
};

$.legacyScannerTimeout = 500;
setTimeout(iterate, 0);
