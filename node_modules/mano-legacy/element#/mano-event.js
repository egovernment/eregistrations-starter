'use strict';

var main = module.exports = require('./main')

  , hasOwnProperty = Object.prototype.hasOwnProperty
  , on, off;

main.on = on = function (type, listener) {
	var data;

	if (typeof listener !== 'function') throw new TypeError(listener + " is not a function");

	if (!hasOwnProperty.call(this, '__ee__')) this.__ee__ = {};
	data = this.__ee__;

	if (!hasOwnProperty.call(data, type)) data[type] = listener;
	else if (typeof data[type] === 'object') data[type].push(listener);
	else data[type] = [data[type], listener];
	return this;
};

main.off = off = function (type, listener) {
	var data, listeners, candidate, i;

	if (typeof listener !== 'function') throw new TypeError(listener + " is not a function");

	if (!hasOwnProperty.call(this, '__ee__')) return this;
	data = this.__ee__;

	if (!hasOwnProperty.call(data, type)) return this;
	listeners = data[type];

	if (typeof listeners === 'object') {
		for (i = 0; (candidate = listeners[i]); ++i) {
			if ((candidate === listener) || (candidate.__eeOnceListener__ === listener)) {
				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
				else listeners.splice(i, 1);
			}
		}
	} else {
		if ((listeners === listener) || (listeners.__eeOnceListener__ === listener)) delete data[type];
	}

	return this;
};

main.once = function (type, listener) {
	var once, self;

	if (typeof listener !== 'function') throw new TypeError(listener + " is not a function");
	self = this;
	on.call(this, type, once = function () {
		off.call(self, type, once);
		listener.apply(this, arguments);
	});

	once.__eeOnceListener__ = listener;
	return this;
};

main.emit = function (type) {
	var data, i, l, listener, listeners, args;

	if (!hasOwnProperty.call(this, '__ee__')) return;
	data = this.__ee__;

	if (!hasOwnProperty.call(data, type)) return;
	listeners = data[type];

	if (typeof listeners === 'object') {
		l = arguments.length;
		args = new Array(l - 1);
		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

		listeners = listeners.slice();
		for (i = 0; (listener = listeners[i]); ++i) listener.apply(this, args);
	} else {
		switch (arguments.length) {
		case 1:
			listeners.call(this);
			break;
		case 2:
			listeners.call(this, arguments[1]);
			break;
		case 3:
			listeners.call(this, arguments[1], arguments[2]);
			break;
		default:
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) args[i - 1] = arguments[i];
			listeners.apply(this, args);
		}
	}
};
