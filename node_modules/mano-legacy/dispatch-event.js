// Internal logic inspired on event.simulate of kangax's protolicious
// https://github.com/kangax/protolicious/blob/master/event.simulate.js

'use strict';

var $ = require('./main')

  , mouseEvents, htmlEvents, get;

mouseEvents = { click: true, dblclick: true, mousedown: true, mouseup: true,
	mouseover: true, mousemove: true, mouseout: true };
htmlEvents = { load: true, unload: true, abort: true, error: true, select: true,
	change: true, submit: true, reset: true, focus: true, blur: true,
	resize: true, scroll: true };

get = function (options, name, def) {
	return (!options || (options[name] == null)) ? def : options[name];
};

module.exports = $.dispatchEvent = function (el, name, opts) {
	var type, event;
	el = $(el);
	if (!el) throw new Error(el + " not found");

	if (mouseEvents.hasOwnProperty(name)) type = 'MouseEvents';
	else if (htmlEvents.hasOwnProperty(name)) type = 'HTMLEvents';
	else throw new Error('Unsupported event');

	if (document.createEvent) {
		event = document.createEvent(type);
		if (type === 'HTMLEvents') {
			event.initEvent(name, get(opts, 'bubbles', true),
				get(opts, 'cancelable', true));
		} else {
			event.initMouseEvent(name, get(opts, 'bubbles', true),
				get(opts, 'cancelable', true), document.defaultView,
				get(opts, 'button', 0), get(opts, 'pointerX', 0),
				get(opts, 'pointerY', 0), get(opts, 'ctrlKey', false),
				get(opts, 'altKey', false), get(opts, 'shiftKey', false),
				get(opts, 'metaKey', false), get(opts, 'button', 0), el);
		}
		el.dispatchEvent(event);
		return;
	}

	event = document.createEventObject();
	opts = Object(opts);
	if (opts.bubbles != null) event.bubbles = opts.bubbles;
	if (opts.cancellable != null) event.cancellable = opts.cancellable;
	if (type === 'MouseEvents') {
		if (opts.pointerX != null) event.clientX = opts.pointerX;
		if (opts.pointerY != null) event.clientY = opts.pointerY;
		if (opts.button != null) event.button = opts.button;
		if (opts.ctrlKey != null) event.ctrlKey = opts.ctrlKey;
		if (opts.altKey != null) event.altKey = opts.altKey;
		if (opts.shitKey != null) event.shiftKey = opts.shiftKey;
		if (opts.metaKey != null) event.metaKey = opts.metaKey;
	}
	el.fireEvent('on' + name, event);
};
