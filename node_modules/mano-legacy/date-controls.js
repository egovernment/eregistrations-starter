'use strict';

var $             = require('./main')
  , dispatchEvent = require('./dispatch-event')

  , defMin = new Date(1900, 0, 1), defMax = new Date()
  , re = /^(\d{4})-(\d{2})-(\d{2})$/
  , toDate, daysInMonth, toISODate;

daysInMonth = function (year, month) {
	switch (String(month)) {
	case '2':
		return Number(year) % 4 ? 28 : 29;
	case '4':
	case '6':
	case '9':
	case '11':
		return 30;
	default:
		return 31;
	}
};

require('./element#/event');
require('./element#/toggle');

toDate = function (value) {
	var match, result;
	if (!value) return null;
	match = value.match(re);
	if (!match) return null;
	result = new Date(Number(match[1]), Number(match[2]) - 1, Number(match[3]));
	return isNaN(result) ? null : result;
};

toISODate = function (year, month, day) {
	var date = String(year) + '-';
	date += (month < 10) ? ('0' + month) : month;
	date += '-';
	date += (day < 10) ? ('0' + day) : day;
	return date;
};

module.exports = $.dateControls = function (id) {
	var control = $(id), day, days, month, months, year, years, i, min, max, updateDefault
	  , currentDefault = null, minYear, parent, toControl, fromControl, validate, order, current
	  , labels, value;
	if (!control) throw new TypeError(id + " not Found");
	if (control.nodeName.toLowerCase() !== 'input') {
		throw new TypeError(id + " is not an input element");
	}
	if (control.getAttribute('type') !== 'date') {
		throw new TypeError(id + " is not an input[type=date] element");
	}

	toControl = function () {
		validate();
		if (!year.value || !month.value || !day.value) {
			control.value = '';
			dispatchEvent(control, 'change');
			return;
		}
		control.value = toISODate(year.value, month.value, day.value);
		dispatchEvent(control, 'change');
	};
	fromControl = function () {
		var date = toDate(control.value);
		updateDefault();
		if (!date) {
			if (!year.value || !month.value || !day.value) return;
			year.value = month.value = day.value = '';
			return;
		}
		if (date < min) date = min;
		else if (date > max) date = max;
		year.value = date.getFullYear();
		validate();
		month.value = date.getMonth() + 1;
		validate();
		day.value = date.getDate();
	};

	updateDefault = function () {
		var def = control.getAttribute('value') || null, nu, old;
		if (def === currentDefault) return;
		if (def) {
			nu = toDate(def);
			if (!nu || isNaN(nu)) {
				if (!currentDefault) return;
				nu = null;
				def = null;
			}
		}
		if (currentDefault) old = toDate(currentDefault);
		currentDefault = def;
		if (old) {
			years[old.getFullYear()].removeAttribute('selected');
			months[old.getMonth() + 1].removeAttribute('selected');
			days[old.getDate()].removeAttribute('selected');
		}
		if (nu) {
			years[nu.getFullYear()].setAttribute('selected', 'selected');
			months[nu.getMonth() + 1].setAttribute('selected', 'selected');
			days[nu.getDate()].setAttribute('selected', 'selected');
		}
	};

	validate = function () {
		var end = daysInMonth(year.value, month.value), date, disSelected
		  , option, disMonths = {}, disDays = {}, i;
		for (i = 29; i <= 31; ++i) $(days[i]).toggle(end >= i);
		if (year.value) {
			date = new Date(year.value, 11, 31);
			if (date > max) {
				date.setDate(1);
				while (date > max) {
					disMonths[date.getMonth() + 1] = true;
					option = $(months[date.getMonth() + 1]);
					if (option.selected) disSelected = true;
					option.disabled = true;
					date.setMonth(date.getMonth() - 1);
				}
				if (disSelected) {
					months[date.getMonth() + 1].selected = true;
					disSelected = false;
				}

				date.setDate(1);
				date.setMonth((month.value || 1) - 1);
				date.setDate(daysInMonth(date.getFullYear(), date.getMonth() + 1));
				while (date > max) {
					disDays[date.getDate()] = true;
					option = $(days[date.getDate()]);
					if (option.selected) disSelected = true;
					option.disabled = true;
					date.setDate(date.getDate() - 1);
				}
				if (disSelected) {
					days[date.getDate()].selected = true;
					disSelected = false;
				}
			}
			date.setMonth(0);
			date.setDate(1);
			if (date < min) {
				date.setDate(daysInMonth(date.getFullYear(), date.getMonth() + 1));
				while (date < min) {
					disMonths[date.getMonth() + 1] = true;
					option = $(months[date.getMonth() + 1]);
					if (option.selected) disSelected = true;
					option.disabled = true;
					date.setDate(1);
					date.setMonth(date.getMonth() + 1);
					date.setDate(daysInMonth(date.getFullYear(), date.getMonth() + 1));
				}
				if (disSelected) {
					months[date.getMonth() + 1].selected = true;
					disSelected = false;
				}

				date.setDate(1);
				date.setMonth((month.value || 1) - 1);
				while (date < min) {
					disDays[date.getDate()] = true;
					option = $(days[date.getDate()]);
					if (option.selected) disSelected = true;
					option.disabled = true;
					date.setDate(date.getDate() + 1);
				}
				if (disSelected) {
					days[date.getDate()].selected = true;
					disSelected = false;
				}
			}
		}
		for (i in months) {
			if (!months.hasOwnProperty(i) || !i) continue;
			if (disMonths.hasOwnProperty(i)) continue;
			months[i].disabled = false;
		}
		for (i in days) {
			if (!days.hasOwnProperty(i) || !i) continue;
			if (disDays.hasOwnProperty(i)) continue;
			days[i].disabled = false;
		}
	};

	value = toDate(control.value);
	if (value) {
		min = toDate(control.getAttribute('min'));
		if (!min) {
			min = new Date(value.getTime() - 1000 * 60 * 60 * 24 * 365);
			if (defMin < min) min = defMin;
		}
		max = toDate(control.getAttribute('max'));
		if (!max) {
			max = new Date(value.getTime() + 1000 * 60 * 60 * 24 * 365);
			if (defMax > max) max = defMax;
		}
	} else {
		min = toDate(control.getAttribute('min')) || defMin;
		max = toDate(control.getAttribute('max'));
		if (!max) {
			if ((defMax - min) < (1000 * 60 * 60 * 24 * 365)) {
				max = new Date(min.getTime() + (1000 * 60 * 60 * 24 * 365));
			} else {
				max = defMax;
			}
		}
	}
	if (min > max) throw new Error("Minimum date cannot be greater than maximum");
	labels = $.dateControls.labels;
	day = $(document.createElement('select'));
	day.className = 'day';

	// We use 'add' instead of 'appendChild' due to bug in old IE
	// which prevents display of text
	// See "Professional JavaScript for Web Developers" by Nicholas Zackas
	// Chapter 13: Scripting Forms / Adding Options
	days = { '': day.add(new Option(labels.day, ''), undefined) };
	for (i = 1; i <= 31; ++i) {
		day.add(days[i] = new Option(i, i), undefined);
	}
	day.addEvent('change', toControl);

	month = $(document.createElement('select'));
	month.className = 'month';
	months = { '': month.add(new Option(labels.month, ''), undefined) };
	for (i = 1; i <= 12; ++i) {
		month.add(months[i] = new Option(i, i), undefined);
	}
	month.addEvent('change', toControl);

	year = $(document.createElement('select'));
	year.className = 'year';
	years = { '': year.add(new Option(labels.year, ''), undefined) };
	minYear = min.getFullYear();
	for (i = max.getFullYear(); i >= minYear; --i) {
		year.add(years[i] = new Option(i, i), undefined);
	}
	year.addEvent('change', toControl);

	if (control.required) {
		day.setAttribute('required', 'required');
		month.setAttribute('required', 'required');
		year.setAttribute('required', 'required');
	}

	(function () {
		var current, update;
		update = function () {
			if (current === control.disabled) return;
			current = day.disabled = month.disabled = year.disabled =
				control.disabled;
		};
		update();
		setInterval(update, 500);
	}());

	parent = control.parentNode;
	order = $.dateControls.order;
	for (i = 0; i < 3; ++i) {
		current = order[i].toLowerCase();
		if (current === 'y') parent.insertBefore(year, control);
		else if (current === 'm') parent.insertBefore(month, control);
		else parent.insertBefore(day, control);
		if (i < 2) parent.insertBefore(document.createTextNode(" "), control);
	}
	control.style.display = 'none';

	control.addEvent('change', fromControl);
	if (control.form) {
		$(control.form).addEvent('reset', function () {
			setTimeout(fromControl, 0);
		});
	}

	control.addEvent('invalid', function (e) {
		$.preventDefault(e);
		console.error(control.name + ": " + control.validationMessage);
	});
	fromControl();
	toControl();
};

$.dateControls.order = ['y', 'm', 'd'];
$.dateControls.labels = { year: 'YYYY', month: 'MM', day: 'DD' };
