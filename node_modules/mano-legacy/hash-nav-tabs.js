'use strict';

var clear               = require('es3-ext/object/clear')
  , firstKey            = require('es3-ext/object/first-key')
  , validateElement     = require('dom-ext/html-element/valid-html-element')
  , validateLiContainer = require('html-dom-ext/li-container/validate')
  , nextTick            = require('next-tick')
  , $                   = require('./main')
  , forIn               = require('./for-in')
  , hashNav             = require('./hash-nav');

require('./element#/class');
require('./element#/event');

var Tabs = function (tabsContainer, initialContainer) {
	var liTabs, self = this;
	this.container = tabsContainer;
	this.tabs = liTabs = {};
	this.rescan();
	this.current = null;
	this.initialContainer = initialContainer;
	tabsContainer.addEvent('click', function () { self.rescan(); });
	setTimeout(function () {
		forIn(liTabs, function (li, name) {
			var el;
			if (!name) return;
			el = $(name);
			if (!el) return;
			el.setAttribute('data-hash-auto-scroll', '0');
		});
	}, 100);
};
Tabs.prototype.rescan = function () {
	var tabs = this.container.getElementsByTagName('li')
	  , i, li, anchor, current;
	if (this.current != null) current = this.tabs[this.current];
	clear(this.tabs);
	for (i = 0; (li = tabs[i]); ++i) {
		if (li.parentNode !== this.container) continue;
		anchor = tabs[i].getElementsByTagName('a')[0];
		if (!anchor) continue;
		this.tabs[anchor.hash.slice(1)] = $(li);
	}
	if ((this.current != null) && !this.tabs[this.current]) {
		current.removeClass('active');
		if (!this.current) this.initialContainer.removeClass('active');
		this.current = null;
	}
};
Tabs.prototype.update = function () {
	var nu = location.hash.slice(1);
	this.rescan();
	if (!this.tabs[nu]) {
		if (!this.tabs['']) {
			nu = firstKey(this.tabs);
			if (nu) {
				nextTick(function () { hashNav.updateTo(nu); });
			}
		} else {
			nu = '';
		}
	}
	if (nu === this.current) return;
	if (!this.tabs[nu]) return;
	this.tabs[nu].addClass('active');
	if (this.current === null) {
		if (!nu) this.initialContainer.addClass('active');
	} else {
		this.tabs[this.current].removeClass('active');
		if (!nu) {
			if (this.current) this.initialContainer.addClass('active');
		} else {
			if (!this.current) this.initialContainer.removeClass('active');
		}
	}
	this.current = this.tabs[nu] ? nu : null;
};

module.exports = $.hashNavTabs = function (tabsContainer, initialContainer) {
	var tabs = new Tabs(validateLiContainer($(tabsContainer)), validateElement($(initialContainer)));
	hashNav.on('update:before', function () { tabs.update(); });
	tabs.update();
	setTimeout(function () { tabs.update(); }, 0);
	return tabs;
};
