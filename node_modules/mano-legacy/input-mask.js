'use strict';

var $                 = require('./main')
  , dispatchEvent     = require('./dispatch-event')
  , setSelectionRange = require('./set-selection-range')
  , getSelectionRange = require('./get-selection-range')
  , getKeyCode        = require('./get-key-code')

  , numRe = /\d/, alphaNumRe = /[A-Za-z0-9]/, alphaRe = /[A-Za-z]/;

require('./element#/event');

module.exports = $.inputMask = function (id) {
	var control = $(id), mask, update, validate, onKeyPress, onKeyDown, onChange
	  , inFocus, isValid, initChar, mChar;
	if (!control) throw new TypeError(id + " not Found");
	if (control.nodeName.toLowerCase() !== 'input') {
		throw new TypeError(id + " is not an input element");
	}
	if (control.type !== 'text') {
		throw new TypeError(id + " is not an input[type=text] element");
	}
	mask = control.getAttribute('data-mask');
	if (!mask) throw new TypeError(id + " has not provided mask");

	for (initChar = 0; initChar < mask.length; ++initChar) {
		mChar = mask.charAt(initChar);
		if (mChar === '?') break;
		if (mChar === 'X') break;
		if (mChar === '8') break;
		if (mChar === 'A') break;
	}

	isValid = function (value) {
		var i, j, mChar, vChar, optional = false;

		j = -1;
		for (i = 0; i < mask.length; ++i) {
			++j;
			mChar = mask.charAt(j);
			vChar = value.charAt(i);

			if (mChar === '?') {
				mChar = mask.charAt(++j);
				if (!mChar) break;
				optional = true;
			}
			if (!vChar) return optional ? value : null;

			if (mChar === 'X') {
				if (!alphaNumRe.test(vChar)) {
					return (optional && (vChar === '_')) ? value.slice(0, i) : null;
				}
			} else if (mChar === '8') {
				if (!numRe.test(vChar)) {
					return (optional && (vChar === '_')) ? value.slice(0, i) : null;
				}
			} else if (mChar === 'A') {
				if (!alphaRe.test(vChar)) {
					return (optional && (vChar === '_')) ? value.slice(0, i) : null;
				}
			} else {
				if (mChar !== vChar) return null;
			}
		}
		return value.charAt(i) ? null : value;
	};

	validate = function () {
		var value = isValid(control.value);
		if (value == null) {
			value = control.getAttribute('value');
			if (value) value = isValid(value);
			if (value == null) value = '';
		}
		if (control.value === value) return;
		control.value = value;
		dispatchEvent(control, 'change');
	};

	update = function (value, cursor, isBack) {
		var selStart, selEnd, masked = false, maskIndex, valIndex, expected = '', mChar, vChar
		  , isOptional, selection;

		valIndex = -1;
		for (maskIndex = 0; maskIndex < mask.length; ++maskIndex) {
			++valIndex;
			mChar = mask.charAt(maskIndex);
			vChar = value.charAt(valIndex);
			if (mChar === '?') {
				mChar = mask.charAt(++maskIndex);
				if (!mChar) break;
				isOptional = true;
			} else {
				isOptional = false;
			}
			if (mChar === 'X') {
				if (!vChar || !alphaNumRe.test(vChar)) {
					if (!isOptional) {
						expected += '_';
						masked = true;
						if ((cursor - 1) === valIndex) --cursor;
					} else {
						--valIndex;
					}
				} else {
					expected += vChar;
				}
				continue;
			}
			if (mChar === '8') {
				if (!vChar || !numRe.test(vChar)) {
					if (!isOptional) {
						expected += '_';
						masked = true;
						if ((cursor - 1) === valIndex) --cursor;
					} else {
						--valIndex;
					}
				} else {
					expected += vChar;
				}
				continue;
			}
			if (mChar === 'A') {
				if (!vChar || !alphaRe.test(vChar)) {
					if (!isOptional) {
						expected += '_';
						masked = true;
						if ((cursor - 1) === valIndex) --cursor;
					} else {
						--valIndex;
					}
				} else {
					expected += vChar;
				}
				continue;
			}
			if (mChar !== vChar) {
				if (isOptional) {
					--valIndex;
					continue;
				}
				masked = true;
			}
			expected += mChar;
			if ((cursor === valIndex) && !isBack) ++cursor;
		}

		if ((control.value === expected) && (cursor == null)) return !masked;
		if (cursor != null) {
			selStart = selEnd = cursor;
		} else {
			selection = getSelectionRange(control);
			selStart = selection.start;
			selEnd = selection.end;
		}
		control.value = expected;
		if (inFocus) setSelectionRange(control, selStart, selEnd);
		return !masked;
	};

	onKeyDown = function (e) {
		var start, end, value, selection;
		if (getKeyCode(e) !== 8) return;
		selection = getSelectionRange(control);
		start = selection.start;
		end = selection.end;
		if (!start && !end) return;
		if (start === end) --start;
		value = control.value;
		update(value.slice(0, start) + value.slice(end), start, true);
		$.preventDefault(e);
	};
	onKeyPress = function (e) {
		var chr, start, end, value, selection, keyCode = getKeyCode(e);
		if (keyCode === 13) {
			validate();
			return;
		}
		chr = String.fromCharCode(keyCode);
		selection = getSelectionRange(control);
		start = selection.start;
		end = selection.end;
		value = control.value;
		update(value.slice(0, start) + chr + value.slice(end), start + chr.length);
		$.preventDefault(e);
	};
	onChange = function () { update(control.value); };

	validate();

	control.addEvent('focus', function () {
		inFocus = true;
		control.addEvent('keydown', onKeyDown);
		control.addEvent('keypress', onKeyPress);
		control.addEvent('keyup', onChange);
		control.addEvent('paste', onChange);
		control.addEvent('change', onChange);
		if (!update(control.value)) {
			setTimeout(function () { setSelectionRange(control, initChar, initChar); }, 20);
		}
	});
	control.addEvent('blur', function () {
		inFocus = false;
		control.removeEvent('keydown', onKeyDown);
		control.removeEvent('keypress', onKeyPress);
		control.removeEvent('keyup', onChange);
		control.removeEvent('paste', onChange);
		control.removeEvent('change', onChange);
		validate();
	});
};
