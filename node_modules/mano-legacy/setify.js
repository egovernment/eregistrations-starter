'use strict';

var $       = require('./main')
  , forEach = require('./for-each')
  , every   = require('./every')
  , some    = require('./some')
  , indexOf = require('./index-of')
  , isArray = require('./is-array')

  , SetLike, proto;

SetLike = function (value) {
	this.__setData__ = [];
	if (isArray(value)) {
		forEach(value, function (item) {
			if (item == null) return;
			if (indexOf(this.__setData__, item) !== -1) return;
			this.__setData__.push(item);
		}, this);
	} else if (value != null) {
		this.__setData__.push(value);
	}
	this.size = this.__setData__.length;
};
proto = SetLike.prototype;

proto.forEach = function (cb, thisArg) {
	var set = this;
	forEach(this.__setData__, function (item) {
		cb.call(thisArg, item, item, set);
	}, thisArg);
};
proto.has = function (item) { return indexOf(this.__setData__, item) !== -1; };
proto.union = function (a/* â€¦others*/) {
	var i, j, data = this.__setData__.slice(), set, l;
	for (i = 0; (set = arguments[i]); ++i) {
		for (j = 0, l = set.__setData__.length; j < l; ++j) {
			if (indexOf(data, set.__setData__[j]) === -1) {
				data.push(set.__setData__[j]);
			}
		}
	}
	set = new SetLike();
	set.__setData__ = data;
	set.size = data.length;
	return set;
};
proto.every = function (cb, thisArg) { return every(this.__setData__, cb, thisArg); };
proto.some = function (cb, thisArg) { return some(this.__setData__, cb, thisArg); };
proto.copy = function () { return new SetLike(this.__setData__); };
proto.add = function (val) {
	var index;
	if (this.__readOnly__) throw new TypeError("Set is read-only");
	index = this.__setData__.indexOf(val);
	if (index !== -1) return this;
	this.__setData__.push(val);
	return this;
};
proto['delete'] = function (val) {
	var index;
	if (this.__readOnly__) throw new TypeError("Set is read-only");
	index = this.__setData__.indexOf(val);
	if (index === -1) return false;
	this.__setData__.splice(index, 1);
	return true;
};
proto.toArray = function () { return this.__setData__.slice(); };

module.exports = $.setify = function (value) {
	var set;
	if (value instanceof SetLike) return value;
	set = new SetLike(value);
	set.__readOnly__ = true;
	return set;
};
