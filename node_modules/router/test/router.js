'use strict';

var ee = require('event-emitter')

  , update;

update = function (location, pathname, search, hash) {
	var pre = location.pathname;
	if (!search) (search = '');
	if (!hash) (hash = '');
	location.pathname = pathname;
	location.search = search;
	location.hash = hash;
	location.href = location.origin + pathname + search + hash;
	if (pre !== pathname) {
		location.emit('change', pathname, search, hash);
	}
	location.emit(pathname, search, hash);
};

module.exports = function (t, a) {
	var location, routes, invoked;

	location = ee({
		hash: '#hash',
		host: 'example.com:8080',
		hostname: 'example.com',
		href: 'http://example.com:8080/path/?search#hash',
		origin: 'http://example.com:8080',
		pathname: '/path',
		port: '8080',
		protocol: 'http:',
		search: '?search',
		goto: function (url) {
			a(url, location.pathname + '/' + location.search + location.hash,
				"First update");
			update(location, location.pathname + '/', location.search, location.hash);
			invoked = true;
		}
	});

	routes = t(location).get;
	a(invoked, true, "Fixed url");

	routes.static['/foo/'] = function () {
		invoked = '/foo/';
	};

	routes.dynamic['/bar/'] = {
		pattern: /^(\d{3})-([a-z]{2})\/$/,
		load: function (a, b) {
			invoked = [a, b];
			return true;
		}
	};

	a.throws(function () {
		update(location, '/other/');
	}, "Not found: not set");

	routes.notFound = function () { invoked = true; };

	update(location, '/else/');
	a(invoked, true, "Not found");

	update(location, '/foo/', '?bar', '#hash');

	a(invoked, '/foo/');

	update(location, '/bar/234-fe/');

	a.deep(invoked, ['234', 'fe']);
};
