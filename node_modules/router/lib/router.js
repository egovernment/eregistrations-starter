'use strict';

var contains   = require('es5-ext/array/#/contains')
  , remove     = require('es5-ext/array/#/remove')
  , last       = require('es5-ext/string/#/last')
  , deferred   = require('deferred/deferred')
  , parse      = require('url3/parse')
  , isPromise  = require('is-promise')
  , findRoute  = require('./find-route')
  , gatherData = require('./gather-form-data')

  , processing = [];

require('deferred/ext/promise/finally');

module.exports = function (location) {
	var update, processPost, router;

	location.on('change', update = function () {
		var data, env, routerResult;
		if (!router.get) return;
		if (!location.pathname) {
			location.onchange();
			return;
		}
		if (last.call(location.pathname) !== '/') {
			location.goto(location.pathname + '/' + location.search + location.hash);
			return;
		}
		data = {};
		env = { user: router.user };
		routerResult = findRoute(router.get, location.pathname, data, env);
		if (isPromise(routerResult)) {
			routerResult.done(function (result) {
				if (result || (result == null)) return;
				if (!router.get[404]) throw new Error('Route not found');
				router.get[404](data, env);
			});
			return;
		}
		if (routerResult) return;
		if (!router.get[404]) throw new Error('Route not found');
		router.get[404](data, env);
	});

	processPost = function (pathname, form) {
		var data, env, value;
		if (contains.call(processing, form)) return;
		data = gatherData(form);
		env = { form: form, user: router.user, action: parse(form.action, true) };
		if (last.call(pathname) !== '/') pathname += '/';
		if ((value = findRoute(router.post, pathname, data, env))) {
			if (value === true) return;
			processing.push(form);
			deferred(value).finally(remove.bind(processing, form));
			return;
		}
		location.goto(location.pathname = pathname);
		if (!router.get[404]) throw new Error('Route not found');
		router.get[404](data, env);
	};

	router = {
		update: update,
		processPost: processPost,
		post: {},
		user: null
	};
	return router;
};
