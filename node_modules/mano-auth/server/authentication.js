// User authentication
// Temporarily it comes with hardcoded direct db access

'use strict';

var ensureString = require('es5-ext/object/validate-stringifiable-value')
  , ensureObject = require('es5-ext/object/valid-object')
  , deferred     = require('deferred')
  , promisify    = require('deferred').promisify
  , debug        = require('debug-ext')('auth')
  , parseUrl     = require('url').parse
  , timeUuid     = require('time-uuid')
  , bcrypt       = require('bcrypt')
  , cookie       = require('cookie-signature')
  , mano         = require('mano')

  , now = Date.now
  , env = mano.env
  , secret = env.secret || timeUuid()
  , postfix = parseUrl(env.url).port || ''
  , User = mano.db.User, compare = promisify(bcrypt.compare)
  , expires = 1000 * 60 * 60 * 3, verify;

var registerSession = function (session, userId, req, res) {
	// Session cookie
	res.cookies.set('sid.' + postfix, session, { expires: new Date(now() + expires) });

	// Reference for SPA app which object is the logged-in user
	// TODO: Remove and provide that information with server stream
	res.cookies.set('authenticated' + postfix, userId, { httpOnly: false });

	// Expose id of logged-in user on request
	req.$user = userId;
};

var unregisterSession = function (req, res) {
	// Clear session cookies
	res.cookies.set('sid.' + postfix, null);
	res.cookies.set('authenticated' + postfix, null, { httpOnly: false });

	delete req.$user;
};

// Verify credentials
exports.verify = verify = function (email, password) {
	var user;
	email = ensureString(email);
	password = ensureString(password);
	user = User.find('email', email).last;
	if (!user) return deferred(null);
	if (user.emailVerificationToken && !user.isEmailVerified) return deferred(null);
	return compare(password, user.password)(function (isOK) { return isOK ? user.__id__ : null; });
};

// Authenticate on basis of provided credentials
exports.authenticate = function (email, password, req, res) {
	(ensureObject(req) && ensureObject(res));
	return verify(email, password)(function (userId) {
		if (!userId) return null;
		exports.login(userId, req, res);
		return userId;
	});
};

// Login user
exports.login = function (userId, req, res) {
	userId = ensureString(userId);
	(ensureObject(req) && ensureObject(res));
	debug("%s login %s", req.$clientId, userId);

	registerSession(cookie.sign(userId, secret), userId, req, res);
};

// Logout
exports.logout = function (req, res) {
	(ensureObject(req) && ensureObject(res));
	debug("%s logout", req.$clientId);

	unregisterSession(req, res);
};

// Logout request middleware
exports.logoutMiddleware = function (req, res, next) {
	if (req._parsedUrl.pathname !== '/logout/') {
		next();
		return;
	}
	exports.logout(req, res);
	res.writeHead(302, { Location: '/' });
	res.end();
};

// Session middleware
exports.sessionMiddleware = function (req, res, next) {
	var session = req.cookies.get('sid.' + postfix), userId;
	if (!session) {
		if (req.cookies.get('authenticated' + postfix)) unregisterSession(req, res);
		next();
		return;
	}
	userId = cookie.unsign(session, secret);
	if (!userId) {
		unregisterSession(req, res);
		next();
		return;
	}
	registerSession(session, userId, req, res);
	next();
};
