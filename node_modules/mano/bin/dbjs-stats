#!/usr/bin/env node

'use strict';

Error.stackTraceLimit = Infinity;

var forEach     = require('es5-ext/object/for-each')
  , pad         = require('es5-ext/string/#/pad')
  , repeat      = require('es5-ext/string/#/repeat')
  , resolve     = require('path').resolve
  , getStats    = require('../scripts/dbjs-stats')

  , max = Math.max, keys = Object.keys
  , stdout = process.stdout.write.bind(process.stdout)
  , program = require('commander').usage('[path]').parse(process.argv)
  , path, columnLog;

path = program.args.length ? resolve(program.args[0]) : process.cwd();

columnLog = function (data) {
	var lengths = [], totalLength;
	data.forEach(function (data) {
		if (!data) return;
		data.forEach(function (str, i) {
			lengths[i] = max(lengths[i] || 0, String(str).length);
		});
	});
	totalLength = lengths.reduce(function (sum, next) {
		return sum + 2 + next;
	}, 0) - 2;
	data.forEach(function (data) {
		if (!data) {
			stdout(repeat.call('-', totalLength) + '\n');
			return;
		}
		data.forEach(function (str, i) {
			if (i) stdout('  ');
			stdout(pad.call(str, ' ', lengths[i]));
		});
		stdout('\n');
	});
};

getStats(path, stdout).done(function (data) {
	var log = [];

	log.push(["Objects", "Properties", "%", "Namespace"]);
	log.push(null);
	log.push([keys(data.objMap).length, data.count, '100.00%', 'Total']);
	forEach(data.typeMap, function (objects, name) {
		log.push([objects.length, objects.totalCount,
			((objects.totalCount / data.count) * 100).toFixed(2) + '%', name]);
	}, null, function (a, b) {
		return this[b].totalCount - this[a].totalCount;
	});

	columnLog(log);

	data.mongo.invoke('close').done();
});
