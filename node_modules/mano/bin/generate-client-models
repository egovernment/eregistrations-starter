#!/usr/bin/env node

'use strict';

Error.stackTraceLimit = Infinity;

var primitiveSet   = require('es5-ext/object/primitive-set')
  , deferred       = require('deferred')
  , path           = require('path')
  , i18n           = require('i18n2')
  , mano           = require('../')
  , tryRequire     = require('../lib/utils/try-require').bind(require)
  , tagRelations   = require('../scripts/relation-tagger')
  , exportSnapshot = require('../scripts/export-snapshot')
  , mkdir          = require('fs2/mkdir')

  , basename = path.basename, resolve = path.resolve
  , program, role, env, rootEnv, options = { log: true }, db;

program = require('commander')
	.usage('[options] [path]')
	.parse(process.argv);

path = program.args.length ? resolve(program.args[0]) : process.cwd();

// Sanity check (that we're in app root folder)
env = require(resolve(path, 'mano.js'));
rootEnv = tryRequire(resolve(process.cwd(), 'env'));
mano.i18n = i18n(((rootEnv.i18n !== undefined) && !rootEnv.i18n) ? {}
	: tryRequire(resolve(process.cwd(), 'i18n')));

role = env.role || basename(path);

// Load schema
db = tryRequire(resolve(path, 'client/model'));
if (db === undefined) {
	console.log("No models defined for '" + role + "'");
	process.exit();
}

if (db._persistent_) {
	options.persistent = primitiveSet.apply(null, db._persistent_);
}

mkdir(resolve(path, 'server'), { intermediate: true })(function () {
	return deferred(tagRelations(db, resolve(path, 'server/model-tags.generated.js'), role),
		exportSnapshot(db, resolve(path, 'client/model.generated.js'), options));
}).done(function () {
	console.log("Client-side models for '" + role + "' created");
}, function (e) {
	console.error("Generation of client-side models for '" + role + "' failed!");
	throw e;
});
