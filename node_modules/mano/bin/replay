#!/usr/bin/env node

'use strict';

Error.stackTraceLimit = Infinity;

// Prevent EMFILE errors
require('fs2/descriptors-handler')();

var resolve     = require('path').resolve
  , deferred    = require('deferred')
  , resolveLog  = require('dbjs-log/lib/resolve-log')
  , restoreLogs = require('dbjs-log/lib/restore-logs')
  , resolveEnv  = require('../scripts/resolve-env')
  , init        = require('../lib/server/init')
  , log         = process.stdout.write.bind(process.stdout)
  , program     = require('commander').usage('replay-path [options]')
	.option('--at [time]', "Rewind to")
	.option('--quick', "Quick start (no generation)")
	.parse(process.argv)
  , path = process.cwd()
  , replayPath = resolve(program.args[0], 'log');

deferred(resolveEnv(path), resolveLog(replayPath, { at: Number(program.at) }))(function (data) {
	var dbLog = data[1], env = data[0], promise;
	console.log("Replay saved state", dbLog.snapshotFilename);
	env.readOnly = true;
	promise = require('../scripts/' + (program.quick ? 'quick-' : '') + 'setup')(path, null, log);
	return promise(function () {
		var db = require('../').db, count = 0;
		log('Replay initial database snapshot...');
		db._postponed_ += 1;
		dbLog.snapshot.forEach(function (data) {
			db.unserializeEvent(data, 'persistent');
			if (!(count % 100)) log('.');
			++count;
		});
		db._postponed_ -= 1;
		log(" [" + count + "] done\n\n");
		return init(path)(function () {
			console.log('Replay recorded database events...');
			return restoreLogs(db, dbLog.log).aside(function () { console.log("...done\n"); });
		});
	});
}).done();
