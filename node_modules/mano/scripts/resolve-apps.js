'use strict';

var find        = require('es5-ext/array/#/find')
  , customError = require('es5-ext/error/custom')
  , memoize     = require('memoizee/plain')
  , path        = require('path')
  , readdir     = require('fs2/readdir')
  , tryRequire  = require('../lib/utils/try-require')
  , resolveRoot = require('./resolve-root')

  , re = /^[a-z][a-z0-9\-]*$/
  , ignores = { node_modules: true, test: true }
  , basename = path.basename, resolve = path.resolve
  , checkPath, byOrder, resolveApps;

byOrder = function (a, b) {
	return (isNaN(a.order) ? 0 : a.order) - (isNaN(b.order) ? 0 : b.order);
};

checkPath = function (path) {
	var conf = tryRequire.call(require, resolve(path, 'mano.js'));
	if (conf == null) {
		return readdir(path, { type: { directory: true } }).map(function (dir) {
			if (!re.test(dir)) return null;
			if (ignores.hasOwnProperty(dir)) return null;
			return checkPath.call(this, resolve(path, dir));
		}, this);
	}
	conf.name = basename(path);
	conf.root = path;
	this.push(conf);
};

resolveApps = memoize(function (path) {
	var conf;
	path = resolve(String(path));
	conf = [];
	return checkPath.call(conf, path)(function () {
		return conf.sort(byOrder);
	});
});

module.exports = function (path/*, name*/) {
	var name = arguments[1], apps = resolveRoot(path)(resolveApps);
	if (name == null) return apps;
	return apps.invoke(find, function (app) {
		return app.name === name;
	})(function (app) {
		if (app) return [app];
		throw customError("App '" + name + "' not found", 'APP_NOT_FOUND');
	});
};
