'use strict';

var includes         = require('es5-ext/array/#/contains')
  , normalizeOptions = require('es5-ext/object/normalize-options')
  , unserialize      = require('dbjs/_setup/unserialize/value')
  , Event            = require('dbjs/_setup/event')
  , quickSetup       = require('./quick-setup')
  , driver           = require('../lib/server/mongodb-driver')
  , mano             = require('../')

  , getPrototypeOf = Object.getPrototypeOf;

module.exports = function (path/*, options*/) {
	var options = normalizeOptions(arguments[1])
	  , log = options.log, ignores = options.ignores || [];
	return quickSetup(path, null, options.log)(function () {
		var mongo = driver(mano.env.db);
		if (log) log("Scan database data...");
		return mongo.getAll()(function (obj) {
			var dbObjects = mano.db.objects, unserializeObject = dbObjects.unserialize
			  , result = [], count = 0;
			obj.forEach(function (obj) {
				var value = unserialize(obj.value, dbObjects), proto, dbObj, desc;
				if (value && value.__id__ && (value.constructor.prototype === value)) {
					proto = value.constructor;
				}
				dbObj = unserializeObject(obj._id, proto);
				if (dbObj._kind_ === 'descriptor') desc = dbObj;
				else if (dbObj._kind_ === 'item') desc = dbObj.object.getOwnDescriptor(dbObj._pSKey_);
				if (desc) {
					desc = getPrototypeOf(desc);
					if (desc._resolveValueGetter_() && !includes.call(ignores, desc._sKey_)) {
						result.push({ object: dbObj, descriptor: desc, mongoObject: obj });
					}
				}
				new Event(dbObj, value, obj.stamp); //jslint: ignore
				if (log && !(count % 1000)) log('.');
				++count;
			});
			if (log) log(" done\n");
			return {
				mongo: mongo,
				result: result
			};
		});
	});
};
