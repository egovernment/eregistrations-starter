'use strict';

var replace      = require('es5-ext/string/#/plain-replace')
  , memoize      = require('memoizee/plain')
  , promisify    = require('deferred').promisify
  , resolve      = require('path').resolve
  , isDbjsObject = require('dbjs/is-dbjs-object')
  , readFile     = promisify(require('fs').readFile)
  , writeFile    = promisify(require('fs').writeFile)
  , codify       = require('./codify')

  , stringify = JSON.stringify, getTpl;

getTpl = memoize(function (mode) {
	return readFile(resolve(__dirname, 'export-stamped' + (mode || '') + '.tpl'), 'utf8');
});

module.exports = function (events, filename/*, options*/) {
	var options = Object(arguments[2]), mode = options.tplMode ? '-' + options.tplMode : '';
	return writeFile(resolve(String(filename)), getTpl(mode)(function (tpl) {
		if (options.log) tpl = tpl.replace(/\/\/\$LOG\$/g, '');
		tpl = tpl.replace('$TIME$', (new Date()).toISOString());
		tpl = tpl.replace('$COUNT$', events.length);
		return replace.call(tpl, '$IMPORT$', events.map(function (event) {
			var obj = event.object, constructor;
			if (isDbjsObject(event.value) && (event.value.constructor.prototype === event.value)) {
				constructor = event.value.constructor;
			}
			return 'value = ' + codify(event.value) + '; new Event(get(' +
				stringify(obj.__valueId__) + ', ' + codify(constructor) + '), value, ' + event.stamp + ');';
		}).join('\n'));
	}));
};
