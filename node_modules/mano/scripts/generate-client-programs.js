'use strict';

var plainReplace = require('es5-ext/string/#/plain-replace')
  , deferred     = require('deferred')
  , resolve      = require('path').resolve
  , fs           = require('fs')
  , mkdir        = require('fs2/mkdir')
  , webmakeOrg   = require('webmake')
  , webmake      = require('../lib/server/webmake')
  , minify       = require('./minify')
  , resolveApps  = require('./resolve-apps')
  , resolveEnv   = require('./resolve-env')

  , promisify = deferred.promisify
  , opts = { intermediate: true }
  , stat = promisify(fs.stat), writeFile = promisify(fs.writeFile);

module.exports = function (path/*, name*/) {
	var env, name = arguments[1], buildStamp = (new Date()).toISOString();
	return resolveEnv(path).aside(function (data) { env = data; })(function () {
		return resolveApps(path, name).map(function (app) {
			var promise;
			return mkdir(resolve(app.root, 'public'), opts)(function () {
				return deferred(writeFile(resolve(app.root, 'public/' + app.name + '.js'),
					promise = webmake(resolve(app.root, 'client/program.js'),
						resolve(app.root, app.viewPath || 'view'), buildStamp)(function (content) {
						if (env.minify === false) return content;
						return minify(content);
					})),
					stat(resolve(app.root, 'client/legacy.js'))('.js', function () {
						return stat(resolve(app.root, 'client/legacy/index.js'))('/index.js');
					})(function (path) {
						var opts = { prettyOutput: false };
						var result = webmakeOrg(resolve(app.root, 'client/legacy' + path), opts);
						result = result(function (content) {
							content = plainReplace.call(content, '${BUILD_TIMESTAMP}', buildStamp);
							content = '(function () {\n' +
								'\tif (typeof sessionStorage === \'undefined\') return;\n' +
								'\tsessionStorage.manoBuildStamp = ' + JSON.stringify(buildStamp) + ';\n' +
								'}());\n' + content;
							if (env.minify === false) return content;
							return minify(content);
						});
						return writeFile(resolve(app.root, 'public/' + app.name + '.legacy.js'), result);
					}, function (err) {
						if (err.code === 'ENOENT') return null;
						throw err;
					}))(function () { return promise.parser; });
			});
		});
	});
};
