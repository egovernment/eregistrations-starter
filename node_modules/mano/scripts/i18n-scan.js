'use strict';

var path        = require('path')
  , fs          = require('fs2')
  , deferred    = require('deferred')
  , copy        = require('es5-ext/object/copy')
  , flatten     = require('es5-ext/array/#/flatten')
  , scanner     = require('i18n2-scanner')
  , mergeMaps   = require('i18n2-scanner/merge-maps')
  , htmlScanner = require('../utils/i18n-html-scan')
  , opts = { depth: Infinity, type: { file: true }, pattern: /\.(?:js|html)$/, ignoreRules: 'git' }
  , globalOpts = copy(opts);

module.exports = function (root/*, options */) {
	var scanResults = Object.create(null), searchPaths, options, promise;
	options = Object(arguments[1]);
	globalOpts.globalRules = 'node_modules';
	searchPaths = [{ path: path.resolve(root), opts: globalOpts }];
	if (options.extraPaths) {
		options.extraPaths.forEach(function (path) { searchPaths.push({ path: path, opts: opts }); });
	}

	var emitProgress = function () { promise.emit('progress'); };
	promise = deferred.map(searchPaths, function (searchConfig) {
		return fs.readdir(searchConfig.path, searchConfig.opts).map(function (fPath) {
			return path.join(searchConfig.path, fPath);
		}).aside(emitProgress);
	}).invoke(flatten).map(function (filePath) {
		return fs.readFile(filePath).then(function (fileContent) {
			scanResults[filePath] = (path.extname(filePath) === '.html')
				? htmlScanner(fileContent) : scanner(fileContent);
		});
	}).then(function () {
		return fs.writeFile(path.resolve(root, 'i18n-scan-map.generated.json'),
			JSON.stringify(mergeMaps(scanResults)));
	});
	return promise;
};
