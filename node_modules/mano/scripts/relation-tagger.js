'use strict';

var replace        = require('es5-ext/string/#/plain-replace')
  , memoize        = require('memoizee')
  , promisify      = require('deferred').promisify
  , isType         = require('dbjs/is-dbjs-type')
  , isObject       = require('dbjs/is-dbjs-object')
  , isNestedObject = require('dbjs/is-dbjs-nested-object')
  , resolve        = require('path').resolve
  , readFile       = promisify(require('fs').readFile)
  , writeFile      = promisify(require('fs').writeFile)

  , getPrototypeOf = Object.getPrototypeOf, stringify = JSON.stringify, getTpl;

getTpl = memoize(function () {
	return readFile(resolve(__dirname, 'tagger.tpl'), 'utf8');
});

module.exports = function (db, filename, tag/*, options*/) {
	var options = Object(arguments[2]);
	tag = stringify('_' + String(tag || '') + '_');
	return writeFile(resolve(String(filename)), getTpl()(function (tpl) {
		var data = db.getSnapshot(), snapshot = {}, properties = [], inheritance = {};
		snapshot.properties = properties;
		snapshot.inheritance = inheritance;
		if (options.log) tpl = tpl.replace(/\/\/\$LOG\$/g, '');
		tpl = tpl.replace('$TAG$', tag.slice(1, -1));
		tpl = tpl.replace('$TIME$', (new Date()).toISOString());
		data.forEach(function (event) {
			var object = event.object, proto;
			properties.push(object.__valueId__);
			if (!isObject(object)) return;
			if (!isType(object)) {
				if (object.constructor.prototype === object) object = object.construtor;
				else if (isNestedObject(object)) return;
			}
			proto = getPrototypeOf(object);
			while (object.__id__ !== 'Base') {
				inheritance[object.__id__] = proto.__id__;
				if (proto.constructor.prototype === proto) proto = proto.constructor;
				object = proto;
				proto = getPrototypeOf(object);
			}
		});
		tpl = tpl.replace('$COUNT$', properties.length);
		return replace.call(tpl, '$CONTENT$', stringify(snapshot));
	}));
};
