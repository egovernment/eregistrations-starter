/**
 * Migrates a set of non-nested objects to a NestedMap,
 * The new map will be defined on the same object as the set and under the same name.
 * Pass a param which represents the name of the collection which you wish to migrate.
 * example of invocation:
 * node migrate-stand-alones-to-nested-maps partners
 */

'use strict';

var updateBulk = require('mano/scripts/plain-dbjs-update-bulk')
  , forEach = require('es5-ext/object/for-each');

module.exports = function (nestedKey) {
	return updateBulk(require('path').join(__dirname, '../../../'), function (data) {
		var partnersToBP = {}, matched, objectKey, getObjectKey, keySplit, modRecords = {},
			multipleKey, sufix;
		getObjectKey = function (key) {
			return key.split('/')[0];
		};
		forEach(data, function (item, key) {
			if (key.match('\\/' + nestedKey + '\\*')) {
				objectKey = getObjectKey(key);
				multipleKey = key.split('*')[key.split('*').length - 1].slice(1);
				partnersToBP[multipleKey] = objectKey;
				item.value = undefined;
				modRecords[key] = true;
			}
		});
		forEach(data, function (item, key) {
			matched = false;
			objectKey = getObjectKey(key);
			if (partnersToBP[objectKey]) {
				sufix = '/';
				matched = true;
				keySplit = key.split('/');
				if (key === objectKey) {
					item.value = undefined;
				} else {
					sufix += keySplit.slice(1).join('/');
					item._id = partnersToBP[objectKey] + '/' + nestedKey + '/map/p' + objectKey + sufix;
				}
			}
			if (!matched && !modRecords[key]) {
				delete data[key];
			}
		});
	}, {
		test: false,
		log: console.log.bind(console)
	});
};
