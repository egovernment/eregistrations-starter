'use strict';

var includes = require('es5-ext/string/#/contains')
  , deferred = require('deferred')
  , readdir  = require('fs2/readdir')
  , readFile = require('fs2/read-file')
  , writeFile = require('fs2/write-file')
  , resolve  = require('path').resolve

  , re = /\r/g;

require('xlint/lib/lintignore-mode');

module.exports = function (root/*, options*/) {
	var processes = [], options = Object(arguments[1]), log = options.log || Function.prototype
	  , preFixed = false, total = 0, fixed = 0;
	log("Strip started ");
	var promise = readdir(root, { pattern: /\.(?:css|html|index|md|txt)$/,
		ignoreRules: ['git', 'lint'], depth: Infinity, type: { file: true }, stream: true });
	promise.on('change', function (event) {
		event.added.forEach(function (filename) {
			++total;
			filename = resolve(root, filename);
			processes.push(readFile(filename)(function (content) {
				content = String(content);
				if (!includes.call(content, '\r')) {
					preFixed = false;
					log('.');
					return;
				}
				++fixed;
				if (!preFixed) log('\n');
				preFixed = true;
				log("Fixed: " + filename + "\n");
				return writeFile(filename, content.replace(re, ''));
			}));
		});
	});
	return promise(function () { return deferred.map(processes); }).aside(function () {
		log(" Done [" + fixed + " of " + total + " needed to be fixed]\n");
	});
};
