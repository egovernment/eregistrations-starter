// Legacy pool runtime
// Loads into memory fake browser processes and retrieves generated HTMLs
// Used to generate HTML for old engines

'use strict';

var forEach           = require('es5-ext/object/for-each')
  , debug             = require('debug-ext')('html-renderer:child')
  , mkdir             = require('fs2/mkdir')
  , deferred          = require('deferred')
  , memoize           = require('memoizee')
  , createWriteStream = require('fs').createWriteStream
  , resolve           = require('path').resolve
  , parseUrl          = require('url').parse
  , Browser           = require('zombie')
  , inspect           = require('util').inspect
  , processPostResult = require('../client/utils/process-post-result')

  , map = Array.prototype.map, stringify = JSON.stringify
  , re  = /:/g;

var stringifyArgs = function (args) {
	return map.call(args, function (arg) {
		if (typeof arg === 'string') return arg;
		return inspect(arg);
	}).join(" ") + "\n";
};

var overrideConsole = function (id, browser, logPath) {
	var browserConsole = browser.window.console;
	return mkdir(logPath, { intermediate: true })(function () {
		var filename = resolve(logPath, id + '.' + (new Date()).toISOString().replace(re, 'x'))
		  , out = createWriteStream(filename + '.log');

		browserConsole.log = browserConsole.debug = browserConsole.debug = browserConsole.warn =
			browserConsole.error = function () {
				out.write((new Date()).toISOString() + ': ' + stringifyArgs(arguments));
			};
		browser.window.onerror = function (error) {
			var args = stringifyArgs(arguments);
			console.error("Window Error for " + stringify(id) + ": " + args);
			out.write((new Date()).toISOString() + ': ' + args);
		};
		browser.on('error', function (error) {
			console.error("Browser Error for " + stringify(id) + ": " + error.stack);
			out.write((new Date()).toISOString() + ': ' + error.stack);
			process.send({ browserError: error.stack });
		});
		return out;
	});
};

var getRenderer = memoize(function (id, domain, cookies, logPath, isFullRender) {
	var browser = new Browser({ features: "no-css no-img no-iframe" });
	debug("initialize renderer %s %o", id, cookies);
	browser.tabs.open();
	browser.waitDuration = '5h';
	forEach(cookies, function (value, name) {
		browser.setCookie({
			name: name,
			value: value,
			domain: parseUrl(domain).hostname
		});
	});
	return overrideConsole(id, browser, logPath)(function (stream) {
		var def = deferred(), startTime = Date.now();
		browser.window.location = domain;
		browser.wait(function () {}); // Invoke start (it's a lazy promise)
		setTimeout(function () {
			if (def.resolved) return;
			stream.write("Domain: " + domain + "\n\n");
			stream.write("Cannot initialize");
			stream.write("Timeout");
			debug("could not initialize renderer, browser timeout");
			stream.end();
			def.reject(new Error("Timeout"));
		}, 60 * 1000);
		browser.window.onDbSync = function () {
			var appLocation = browser.window.appLocation
			  , htmlElement = browser.window.document.documentElement
			  , body = browser.window.document.body;
			delete browser.window.onDbSync;
			if (def.resolved) {
				debug("renderer eventually resolved after timeout %s Time %s", id,
					((Date.now() - startTime) / 1000).toFixed(2));
				return;
			}
			debug("resolved Renderer %s", id);
			var fn = function (url, postMessage) {
				var html, form;
				try {
					appLocation.goto(url);
					if (postMessage) {
						form = browser.document.querySelector('form[action="' + postMessage.action + '"]');
						if (!form) {
							debug("could not progate post message!. Form of action %s not found",
								stringify(postMessage.action));
						} else {
							if (form.processPostResult) form.processPostResult(postMessage);
							else processPostResult(form, postMessage);
						}
					}
				} catch (e) {
					stream.write("Domain: " + domain + "\n\n");
					stream.write("Body: " + body.innerHTML + "\n\n");
					stream.write(e.stack);
					getRenderer.clear(id);
					throw e;
				}
				html = isFullRender ? htmlElement.outerHTML : body.outerHTML;
				if (postMessage) {
					browser.window.clearPostMessage(postMessage);
					if (form && form.clearPostResult) form.clearPostResult(postMessage);
				}
				return html;
			};
			fn.window = browser.window;
			fn.destroy = function () {
				browser.window.close();
				browser = null;
				stream.end();
			};
			def.resolve(fn);
		};
		return def.promise;
	});
}, { primitive: true, length: 1, max: 200, dispose: function (promise) {
	promise.aside(function (fn) { fn.destroy(); });
} });

module.exports = function (domain, logPath) {
	process.on('message', function (data) {
		if (data.debug) {
			getRenderer(data.id, domain, {}, logPath).done(function (getHtml) {
				var fn;
				try {
					fn = new Function('window', String(data.code));
					debug("debug eval begin");
					fn(getHtml.window);
					debug("debug eval end");
				} catch (e) {
					debug("debug failed!, code: %s", String(data.code));
					console.error(e.stack);
				}
			}, function (err) { process.send({ id: 'debug-' + data.id, error: err.stack }); });
			return;
		}
		debug("received request", data.id, data.url);
		if (!data.id || !data.cookies) {
			debug("unrecognized request | %o" + data);
			return;
		}
		getRenderer(data.cookies.id, domain, data.cookies, logPath, data.fullRender)
			.done(function (getHtml) {
				var html;
				try {
					html = getHtml(data.url, data.postMessage);
				} catch (e) {
					debug("HTML Error %s", e.stack);
					process.send({ id: data.id, error: e.stack });
					return;
				}
				debug("page Rendered, sending Response %s %s", data.id, data.url);
				process.send({ id: data.id, html: html });
			}, function (err) { process.send({ id: data.id, error: err.stack }); });
	});
};
