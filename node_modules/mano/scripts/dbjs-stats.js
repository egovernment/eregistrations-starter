'use strict';

var forEach    = require('es5-ext/object/for-each')
  , callable   = require('es5-ext/object/valid-callable')
  , noop       = require('es5-ext/function/noop')
  , contains   = require('es5-ext/string/#/contains')
  , isString   = require('es5-ext/string/is-string')
  , deferred   = require('deferred')
  , mongodb    = require('mongodb/lib/mongodb')
  , resolveEnv = require('./resolve-env')

  , isId = RegExp.prototype.test.bind(/^\d[a-z0-9]+$/)
  , promisify = deferred.promisify
  , Mongo = mongodb.Db, Server = mongodb.Server;

module.exports = function (path/*, log*/) {
	var log = arguments[1];

	if (log == null) log = noop;
	else callable(log);

	return resolveEnv(path)(function (env) {
		var mongo, collection, time, count = 0, objMap = {}, typeMap = {}
		  , config = env.db;

		// Populate DB from persistent layer
		log('Read database...');

		mongo = new Mongo(config.name,
			new Server(config.host, config.port, {}), { w: 1 });
		mongo = promisify(mongo.open).call(mongo)(function (db) {
			return config.user ? promisify(db.authenticate).call(db, config.user,
				config.password)(db) : db;
		});

		collection = mongo.invokeAsync('collection', config.collection);
		return collection.invokeAsync('find', {}, {})(function self(cursor) {
			var checkAuthError = function (data) {
				if (isString(data) && contains.call(data, 'unauthorized')) {
					throw new Error("Unauthorized mongo connection");
				}
			};
			time = Date.now();
			return promisify(cursor.toArray).call(cursor)(function (obj) {
				obj.forEach(function (obj) {
					var id, value;
					checkAuthError(obj);
					if (isId(obj._id)) {
						value = obj.value.slice(1, -1);
						if (!typeMap.hasOwnProperty(value)) typeMap[value] = [];
						typeMap[value].push(id = obj._id);
					} else {
						id = obj._id.split(':', 1)[0];
					}
					if (!objMap.hasOwnProperty(id)) objMap[id] = [];
					objMap[id].push(obj);
					log('.');
					++count;
				});
			});
		})(function () {
			time = (Date.now() - time) / 1000;
			log(' [' + count + ' objects in ' + time.toFixed(3) + 's] read\n\n');

			forEach(typeMap, function (objects) {
				objects.totalCount = 0;
				objects.forEach(function (obj) {
					objects.totalCount += objMap[obj].length;
				});
			});
			return { objMap: objMap, typeMap: typeMap, count: count,
				mongo: mongo, collection: collection };
		});
	});
};
