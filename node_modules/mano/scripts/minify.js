'use strict';

var fixReserved = require('es5-fix/ast/reserved-identifiers-to-literals')
  , fixObserve  = require('dbjs/scripts/ast-unmangle-observe')
  , esprima     = require('esprima')
  , esmangle    = require('esmangle')
  , escodegen   = require('escodegen')

  , now = Date.now;

module.exports = function (code/*, options*/) {
	var ast, astCopy, mangled, result, time, options = Object(arguments[1]);

	// Parse AST
	time = now();
	ast = esprima.parse(code);
	// At this point to produce copy we can't use es5-ext Object.deepCopy
	// as some objects configurations come as specific class instances
	// and copying of those is not supported by deepCopy
	astCopy = esprima.parse(code);
	if (options.log) {
		console.log("Parsed in " + ((now() - time) / 1000).toFixed(2) + "s");
	}

	// Mangle AST
	time = now();
	mangled = esmangle.mangle(ast);
	if (options.log) {
		console.log("Mangled in " + ((now() - time) / 1000).toFixed(2) + "s");
	}

	// Fix reserved identifiers (for incomplete ES5 engines)
	time = now();
	fixReserved(mangled);
	if (options.log) {
		console.log("Fixed reserved case, in " +
			((now() - time) / 1000).toFixed(2) + "s");
	}

	// Fix `_observe` mangle
	time = now();
	fixObserve(mangled, astCopy);
	if (options.log) {
		console.log("Fixed `_observe` case, in " +
			((now() - time) / 1000).toFixed(2) + "s");
	}

	// Generate output
	time = now();
	result = escodegen.generate(mangled, {
		format: {
			renumber: true,
			hexadecimal: true,
			escapeless: true,
			compact: true, // false to preserve whitespace
			semicolons: false,
			parentheses: false
		}
	});
	if (options.log) {
		console.log("Generated in " + ((now() - time) / 1000).toFixed(2) + "s");
	}

	return result;
};
