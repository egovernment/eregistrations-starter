'use strict';

var isObject   = require('es5-ext/object/is-object')
  , callable   = require('es5-ext/object/valid-callable')
  , noop       = require('es5-ext/function/noop')
  , deferred   = require('deferred')
  , isPromise  = require('is-promise')
  , driver     = require('../lib/server/mongodb-driver')
  , resolveEnv = require('./resolve-env');

module.exports = function (path, cb/*, options*/) {
	var mongo, options = Object(arguments[2]), dot = true, oldId
	  , log = options.log, count = 0;

	if (log == null) log = noop;
	else callable(log);

	return resolveEnv(path)(function (env) {
		var config = env.db;
		mongo = driver(config);
		log("Start iteration");
		return mongo.getAll().map(function (obj) {
			var value = cb(obj._id, obj.value, obj), id;
			var processValue = function (value) {
				if (value == null) {
					log('.');
					dot = true;
					return;
				}
				++count;
				if (dot) {
					log('\n');
					dot = false;
				}
				console.log(obj._id, obj.value, '->', value);
				id = obj._id;
				if (options.test) return;
				if (isObject(value)) {
					if (value.id != null) id = value.id;
					if (value.value == null) value = obj.value;
					else value = value.value;
				}
				if (value === false) return mongo.delete(obj._id);
				obj.stamp += 1;
				if (id !== obj._id) {
					oldId = obj._id;
					obj._id = id;
					obj.value = value;
					return deferred(mongo.delete(oldId), mongo.update(id, obj));
				}
				if (value === obj.value) return;
				obj.value = value;
				return mongo.update(obj._id, obj);
			};
			if (isPromise(value)) return value.then(processValue);
			return processValue(value);
		}).finally(function () {
			if (dot) log('\n');
			console.log("Done [" + count + " affected]");
			setTimeout(function () {
				mongo.close(function (err) {
					if (err) throw err;
				});
			}, 500);
		});
	});
};
