'use strict';

var compact       = require('es5-ext/array/#/compact')
  , forEach       = require('es5-ext/object/for-each')
  , isEmpty       = require('es5-ext/object/is-empty')
  , isPlainObject = require('es5-ext/object/is-plain-object')
  , replace       = require('es5-ext/string/#/plain-replace')
  , memoize       = require('memoizee')
  , promisify     = require('deferred').promisify
  , resolve       = require('path').resolve
  , readFile      = promisify(require('fs').readFile)
  , writeFile     = promisify(require('fs').writeFile)
  , codify        = require('./codify')
  , isNested      = require('dbjs/is-dbjs-nested-object')
  , isObjectName  = require('dbjs/_setup/utils/is-object-name')

  , isArray = Array.isArray
  , create = Object.create, keys = Object.keys, stringify = JSON.stringify
  , isPrototype = function (obj) { return obj.constructor.prototype === obj; }
  , isProtoMaster = RegExp.prototype.test.bind(/^[A-Z][a-zA-Z0-9]*#/)
  , getTpl, getObjCommand, deepStringify;

getTpl = memoize(function () {
	return readFile(resolve(__dirname, 'export.tpl'), 'utf8');
});

getObjCommand = function (obj) {
	var path;
	if (!obj.owner) return 'get(' + stringify(obj.__id__) + ')';
	path = [obj];
	obj = obj.owner;
	while (obj.owner) {
		path.unshift(obj);
		obj = obj.owner;
	}
	return 'get(' + stringify(obj.__id__) + ')' + path.map(function (obj) {
		return '._getObject_(' + stringify(obj.__sKey__) + ')';
	}).join('');
};

deepStringify = function (value, objId) {
	var names;
	if (isArray(value)) return 'toSet([' + value.join(',') + '])';
	if (!isPlainObject(value)) return value;
	names = keys(value);
	if (!names.length) return;
	names = compact.call(names.map(function (key) {
		var value = deepStringify(this[key]);
		if (!value) return;
		return stringify(key) + ':' + value;
	}, value));
	if (!names.length) return;
	return '{' + names.join(',') + '}';
};

module.exports = function (db, filename/*, options*/) {
	var options = Object(arguments[2]);
	return writeFile(resolve(String(filename)), getTpl()(function (tpl) {
		var data = db.getSnapshot(), result = [], objects = create(null)
		  , persistent;
		if (options.log) tpl = tpl.replace(/\/\/\$LOG\$/g, '');
		tpl = tpl.replace('$COUNT$', data.length);
		data.forEach(function (event) {
			var obj = event.object, kind = obj._kind_, str, value, id;
			if (kind === 'descriptor') {
				value = obj._lastOwnEvent_.value;
				if (isPrototype(obj.master) || (typeof value === 'function')) {
					str = 'get(' + stringify(obj.__valueId__) + ')._setValue_(' +
						codify(value) + ');';
				} else if (!isNested(obj.object)) {
					str = 'desc.value = ' + codify(value) +
						'; defineProperty(' + getObjCommand(obj.object) + ', ' +
						stringify(obj.key) + ', desc);';
				} else {
					if (!objects[obj.object.__id__]) {
						objects[obj.object.__id__] = create(null);
					}
					objects[obj.object.__id__][obj.key] = codify(value);
					return;
				}
			} else if (kind === 'sub-descriptor') {
				if (obj.key === 'reverse') {
					str = 'get(' + stringify(obj.__valueId__) + ')._setValue_(' +
						codify(obj._lastOwnEvent_.value) + ');';
				} else {
					str = 'desc.value = ' + codify(obj._lastOwnEvent_.value) +
						'; defineProperty(get(' +
						stringify(obj.object.__id__ +
							(obj._pSKey_ ? ('/' + obj._pSKey_) : '$')) +
						'), ' + stringify(obj.key) + ', desc);';
				}
			} else if (kind === 'item') {
				id = obj.object.__id__ + '/' + obj._pSKey_;
				if (!objects[id]) {
					objects[id] = [];
					objects[id].object = obj.object;
					objects[id].key = obj._pSKey_;
				}
				if (isProtoMaster(id)) objects[id].push({ value: obj._value_, key: obj._sKey_ });
				else if (obj._value_) objects[id].push(codify(obj.key));
			} else if (isObjectName(obj.__id__)) {
				str = 'obj = get(' + stringify(obj.__id__) + ', ' +
					codify(obj._lastOwnEvent_.value) + '); obj._setValue_(' +
					codify(obj._lastOwnEvent_.value) + ');\n' +
					'if (!db.hasOwnProperty(' + stringify(obj.__id__) +
					')) { desc.value = obj; defineProperty(db, ' +
					stringify(obj.__id__) + ', desc); }';
			} else {
				str = 'get(' + stringify(obj.__id__) + ', ' +
					codify(obj._lastOwnEvent_.value) + ')._setValue_(' +
					codify(obj._lastOwnEvent_.value) + ');';
			}
			result.push(str);
		});
		persistent = options.persistent || create(null);
		keys(objects).sort().forEach(function (path) {
			var value = objects[path], name, obj = objects, current;
			delete objects[path];
			path = path.split('/');
			name = path.shift();
			if (!obj[name]) obj[name] = create(null);
			current = name;
			obj = obj[name];
			while (path.length) {
				name = path.shift();
				current += '/' + name;
				if (persistent[current]) {
					name = current;
					obj = objects;
				}
				if (path.length) {
					if (!obj[name]) obj[name] = create(null);
					obj = obj[name];
					continue;
				}
				obj[name] = value;
			}
		});
		keys(objects).forEach(function (objId) {
			var data, nameStr;
			data = compact.call(keys(objects[objId]).map(function (name) {
				var value;
				if (isProtoMaster(objId)) {
					if (isArray(this[name])) {
						result.push('obj = ' + getObjCommand(this[name].object) + ';');
						result.push(this[name].map(function (data, index) {
							return 'item = obj._getOwnMultipleItem_(' + stringify(this.key) +
								', uKey(' + stringify(data.key) + '), ' + stringify(data.key) + '); ' +
								'item._setValue_(' + stringify(data.value) + '); ' +
								'setDesc.value = ' + index + '; ' +
								'defineProperty(item, \'lastModified\', setDesc)';
						}, this[name]).join('; '));
						return;
					}
					if (isPlainObject(this[name])) {
						forEach(this[name], function self(value, name) {
							if (isArray(value)) {
								result.push('obj = ' + getObjCommand(value.object) + ';');
								result.push(value.map(function (data, index) {
									return 'item = obj._getOwnMultipleItem_(' + stringify(this.key) +
										', uKey(' + stringify(data.key) + '), ' + stringify(data.key) + '); ' +
										'item._setValue_(' + stringify(data.value) + '); ' +
										'setDesc.value = ' + index + '; ' +
										'defineProperty(item, \'lastModified\', setDesc)';
								}, value).join('; '));
								delete this[name];
								return;
							}
							if (isPlainObject(value)) {
								forEach(value, self, value);
								if (isEmpty(value)) delete this[name];
							}
						}, this[name]);
						if (isEmpty(this[name])) {
							delete this[name];
							return;
						}
					}
				}
				value = deepStringify(this[name], objId);
				if (!value) return;
				return '\t' + stringify(name) + ': { configurable: true,' +
					' enumerable: true, writable: false, value: ' + value + ' }';
			}, objects[objId]));
			if (!data.length) return;
			objId = objId.split('/');
			nameStr = 'get(' + stringify(objId.shift()) + ')';
			while (objId.length) {
				nameStr += '._getObject_(' + stringify(objId.shift()) + ')';
			}
			result.push('defineProperties(' + nameStr + ', {');
			result.push(data.join(',\n'));
			result.push('});');
		});
		return replace.call(tpl, '$IMPORT$', result.join('\n'));
	}));
};
