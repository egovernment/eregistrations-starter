// Generates app client program files

'use strict';

var deferred      = require('deferred')
  , path          = require('path')
  , writeFile     = require('fs2/write-file')
  , resolveModule = require('cjs-module/resolve')
  , webmake       = require('webmake')
  , webmakeViews  = require('../lib/server/webmake')
  , minify        = require('./minify')

  , basename = path.basename, resolve = path.resolve

  , writeOpts = { intermediate: true };

module.exports = function (appPath/*, options*/) {
	var promise, options = Object(arguments[1]), appName = basename(appPath);
	return deferred(

		// SPA program
		promise = webmakeViews(resolve(appPath, 'client/program.js'),
			options.viewPath && resolve(appPath, options.viewPath))(
			function (content) { return options.minify ? minify(content) : content; }
		)(function (content) {
			return writeFile(resolve(appPath, 'public/' + appName + '.js'), content, writeOpts);
		})(function () { return promise.parser; }),

		// Optional legacy script
		resolveModule(appPath, './client/legacy')(function (modulePath) {
			var promise;
			if (!modulePath) return;
			return (promise = webmake(modulePath, { prettyOutput: false })(function (content) {
				return options.minify ? minify(content) : content;
			})(function (content) {
				return writeFile(resolve(appPath, 'public/' + appName + '.legacy.js'), content, writeOpts);
			})(function () { return promise.parser; }));
		})
	);
};
