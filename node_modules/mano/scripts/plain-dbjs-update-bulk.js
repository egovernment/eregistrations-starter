'use strict';

var toArray    = require('es5-ext/object/to-array')
  , callable   = require('es5-ext/object/valid-callable')
  , noop       = require('es5-ext/function/noop')
  , deferred   = require('deferred')
  , driver     = require('../lib/server/mongodb-driver')
  , resolveEnv = require('./resolve-env');

module.exports = function (path, cb/*, options*/) {
	var mongo, options = Object(arguments[2]), log = options.log, count;

	if (log == null) log = noop;
	else callable(log);

	return resolveEnv(path)(function (env) {
		var config = env.db;
		mongo = driver(config);
		log("Start iteration");
		return mongo.getAll()(function (data) {
			var result = {}, arrResult, indexes = {};
			data.forEach(function (obj, index) {
				result[obj._id] = obj;
				indexes[obj._id] = index;
			});
			cb(result);
			arrResult = toArray(result, null, null, function (a, b) { return indexes[a] - indexes[b]; });
			count = arrResult.length;
			return deferred.map(arrResult, function (data) {
				var result, obj = data[1], id = data[0];
				log("Update", id, obj);
				if (options.test) return;
				result = (obj.value === undefined) ? mongo.delete(obj._id) : mongo.update(obj._id, obj);
				if (obj._id !== id) return deferred(mongo.delete(id), result);
				return result;
			});
		}).finally(function () {
			log("Done [" + count + " affected]");
			setTimeout(function () { mongo.close().done(); }, 500);
		});
	});
};
