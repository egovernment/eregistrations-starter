'use strict';

var toArray                   = require('es5-ext/array/to-array')
  , ensureCallable            = require('es5-ext/object/valid-callable')
  , Map                       = require('es6-map')
  , Set                       = require('es6-set')
  , deferred                  = require('deferred')
  , mano                      = require('../../')
  , resolveUserId             = require('./resolve-user-id')
  , resolveManagerId          = require('./resolve-manager-id')
  , businessProcessUserMap    = require('./business-process-user-map')
  , businessProcessManagerMap = require('./business-process-manager-map')
  , currentBusinessProcessMap = require('./current-business-process-map')
  , currentClientMap          = require('./current-client-map')
  , currentClientReverseMap   = require('./current-client-reverse-map')
  , userIds                   = require('./user-ids')

  , isDbId = RegExp.prototype.test.bind(/^[0-9a-z][^\n]*$/)
  , isInvalidId = RegExp.prototype.test.bind(/^[a-z][^\/]*$/)
  , registerUserAccess = mano.registerUserAccess
  , done = new Map();

ensureCallable(registerUserAccess);

module.exports = mano.isLomasCase ? function (ids) {
	return deferred.map(toArray(ids), function (id) {
		var result = done.get(id);
		if (result) return result;
		if (isInvalidId(id)) {
			done.set(id, true);
			return true;
		}
		result = deferred(
			resolveUserId(id)(function (userId) {
				if (!userId) return;
				return registerUserAccess(userId);
			}),
			resolveManagerId(id)(function (userId) {
				if (!userId) return;
				return registerUserAccess(userId);
			})
		);
		done.set(id, result);
		return result.finally(function () { done.set(id, true); }); // Release promise from memory
	});
} : function (ids) {
	var resolve = function self(id, upper) {
		var result = done.get(id), def;
		var inspectReverseMap = function (map) {
			var dep = map.get('7' + id);
			if (dep && !upper.has(dep)) return resolve(dep, upper);
		};
		var inspectMap = function (map) {
			var dep = map.get(id);
			if (!dep) return;
			dep = dep.slice(1);
			if (!upper.has(dep)) return resolve(dep, upper);
		};

		if (result) return result;
		if (!isDbId(id)) {
			done.set(id, true);
			return true;
		}
		if (!upper) upper = new Set([id]);
		else upper.add(id);
		def = deferred();
		result = def.promise;
		if (!upper.result) upper.result = result;
		def.resolve(userIds(function (set) {
			if (set.has(id)) {
				// User
				return deferred(
					currentBusinessProcessMap(inspectMap),
					currentClientMap(inspectMap),
					currentClientReverseMap(inspectReverseMap),
					registerUserAccess(id)
				);
			}
			// Business process
			return deferred(
				businessProcessUserMap(inspectReverseMap),
				businessProcessManagerMap(inspectMap),
				registerUserAccess(id)
			);
		}));
		done.set(id, upper.result);
		upper.result.finally(function () { done.set(id, true); }); // Release promise from memory
		return result;
	};
	return deferred.map(toArray(ids), function (id) { return resolve(id); });
};
