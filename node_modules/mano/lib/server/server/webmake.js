'use strict';

var count      = require('es5-ext/object/count')
  , debug      = require('debug-ext')('client-bundle')
  , stat       = require('fs2/stat')
  , webmake    = require('../webmake')
  , webmakeOrg = require('webmake')
  , encode     = require('ent').encode

  , stringify = JSON.stringify;

module.exports = function (req, res, next) {
	var promise, conf = this[req._parsedUrl.pathname];

	if (!conf) {
		next();
		return;
	}

	res.setHeader('Content-Type', 'application/javascript; charset=utf-8');
	// Do not cache generated bundle
	res.setHeader('Cache-Control', 'no-cache');

	if (conf.tplsPath) {
		promise = webmake(conf.path, conf.tplsPath);
	} else {
		promise = stat(conf.path)(conf.path, conf.path.slice(0, -3) + '/index.js')(
			function (path) { return (promise = webmakeOrg(path, { cache: true })); }
		);
	}
	promise.done(function (content) {
		// Send script
		res.end(content);
		debug("%s %s Webmake OK [%s modules from %s packages in %ss]", req.$clientWithSessionId,
			req.url, promise.parser.modulesFiles.length, count(promise.parser.packages),
			(promise.time / 1000).toFixed(2));
	}, function (err) {
		debug("%s %s Webmake error", req.$clientWithSessionId, req.url);
		console.error(err.stack);

		// Expose eventual error loudly in the browser
		res.end('(document.body || document.documentElement).innerHTML =' +
			' \'<div style="font-size: 1.6em;' +
			' padding: 1em; text-align: left; font-weight: bold; color: red;' +
			' position: absolute; top: 1em; left: 10%; width: 80%;' +
			' background: white; background: rgba(255,255,255,0.9);' +
			' border: 1px solid #ccc;"><div>Could not generate ' + req._parsedUrl.pathname +
			'</div><div style="font-size: 0.8em; padding-top: 1em">' +
			stringify(encode(err.message)).slice(1, -1).replace(/'/g, '\\\'') +
			'</div></div>\';');
	});
};
