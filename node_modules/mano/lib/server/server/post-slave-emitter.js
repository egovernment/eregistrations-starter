'use strict';

var Set               = require('es6-set')
  , sendOk            = require('../utils/send-ok')
  , sendJSON          = require('../utils/send-json')
  , sendError         = require('../utils/send-error')
  , resolveUserAccess = require('../resolve-user-access')
  , mano              = require('../../..')

  , isArray = Array.isArray
  , isDigit = RegExp.prototype.test.bind(/[0-9]/)
  , isPotentialId = RegExp.prototype.test.bind(/^[0-9][a-z0-9]{7,}$/)
  , keys = Object.keys
  , _ = mano.i18n;

var addValueIds = function self(value) {
	if (isArray(value)) {
		value.forEach(self, this);
	} else if (typeof value === 'string') {
		if (isPotentialId(value)) this.add(value);
	}
};

module.exports = function (legacyPool) {
	return function (action, data, req, res, next) {
		var ids = new Set();
		if (req.$user) ids.add(req.$user);
		keys(data).forEach(function (key) {
			ids.add(key.split('/', 1)[0]);
			addValueIds.call(ids, data[key]);
		});
		action.pathname.split('/').filter(Boolean).forEach(function (token) {
			if (isDigit(token[0])) ids.add(token);
		});
		resolveUserAccess(ids)(function () { return mano.registerUserPromise; })(function () {
			return mano.emitPostRequest({
				appName: req.$appName,
				env: { userId: req.$user, url: req.url },
				body: data,
				referer: req.headers.referer
			});
		}).done(function (result) {
			var path = req._parsedUrl.pathname;
			if (result.statusCode === 404) {
				if (!legacyPool || !req.cookies.get('legacy')) {
					res.statusCode = 404;
					res.end("Not Found");
				} else {
					legacyPool.postMessages[req.$clientId] = {
						action: path + (req._parsedUrl.search || ''),
						error: { message: _("Submission of this form is not supported") }
					};
					res.writeHead(303, { Location: req.headers.referer || '/' });
					res.end();
				}
				return;
			}
			if (result.error) {
				if (!legacyPool || !req.cookies.get('legacy')) {
					sendError.call(res, result.error);
					return;
				}
				legacyPool.postMessages[req.$clientId] = {
					action: path + (req._parsedUrl.search || ''),
					error: result.error
				};
				res.writeHead(303, { Location: result.url });
				res.end();
				return;
			}
			if (!legacyPool || !req.cookies.get('legacy')) {
				if (result.data === true) {
					sendOk.call(res);
					return;
				}
				if (result.data) {
					if (typeof result.data === 'string') sendOk.call(res, result.data);
					else sendJSON.call(res, result.data);
					return;
				}
			} else if (result.data && result.data.message) {
				legacyPool.postMessages[req.$clientId] = {
					action: path + (req._parsedUrl.search || ''),
					message: String(result.data.message)
				};
			}
			res.writeHead(303, { Location: result.url });
			res.end();
		});
	};
};
