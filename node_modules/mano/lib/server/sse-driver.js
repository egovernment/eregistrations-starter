// SSE driver for client connections

'use strict';

var assign      = require('es5-ext/object/assign')
  , d           = require('d')
  , autoBind    = require('d/auto-bind')
  , deferred    = require('deferred')
  , uuid        = require('time-uuid')
  , debugClient = require('debug-ext')('client')
  , debug       = require('debug-ext')('db-data-sync')
  , Client      = require('./client')

  , isArray = Array.isArray, Connection;

module.exports = function (req, res) {
	var connection, client, isAborted, onClose;

	req.socket.setTimeout(0);
	res.writeHead(200, {
		'Content-Type': 'text/event-stream',
		'Cache-Control': 'no-cache',
		Connection: 'keep-alive'
	});
	res.write('id\n\n');

	Client.get(req).done(function (resolvedClient) {
		var oldConnection;
		if (isAborted) return;
		connection = new Connection(req, res);
		client = resolvedClient;
		connection.client = client;

		if (client.connection) oldConnection = client.connection;
		client.connection = connection;
		debugClient("%s SSE connected", req.$clientWithSessionId);
		client.onConnect();
		if (oldConnection) oldConnection.close();
	});

	req.on('close', onClose = function () {
		if (!client) {
			isAborted = true;
			return;
		}
		if (client.connection === connection) {
			client.connection = null;
			debugClient("%s SSE disconnected", req.$clientWithSessionId);
			client.emit('disconnect');
		}
	});
	req.on('abort', onClose);
};
Connection = function (req, res) {
	this.res = res;
	this.clientWithSessionId = req.$clientWithSessionId;
	this.keepAliveInterval = setInterval(this.keepAlive, 5000);
	req.on('close', this.close);
};
Object.defineProperties(Connection.prototype, assign({
	send: d(function (action, data) {
		var id = uuid(), def;
		debug("%s server -> client %s (%s) %s", this.clientWithSessionId, action, id,
			(new Date()).toISOString());
		if (isArray(data)) {
			if (data.length > 20) {
				console.log(data.slice(0, 20), "... and", data.length - 20, "more");
			} else {
				console.log(data);
			}
			data = data.join('\ndata: ');
		}
		this.res.write('data: ' + action +
			(data ? ('\ndata: ' + data) : '') + '\nid: ' + id + '\n\n');
		this.res.flush();
		if (action !== 'dbupdate') return;
		def = deferred();
		this.client.sseWaiting[id] = def;
		setTimeout(function () {
			if (!def.resolved) {
				debugClient("%s SSE Reception not confirmed after 2 minutes %s",
					this.clientWithSessionId, id);
				def.reject(new Error('SSE confirmation timeout'));
			}
		}.bind(this), 120 * 1000);
		return def.promise;
	})
}, autoBind({
	keepAlive: d(function () {
		this.res.write(': keep alive\n');
		this.res.flush();
	}),
	close: d(function () { clearInterval(this.keepAliveInterval); })
})));
