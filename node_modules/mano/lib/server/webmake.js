'use strict';

var forEach       = require('es5-ext/object/for-each')
  , plainReplace  = require('es5-ext/string/#/plain-replace')
  , deferred      = require('deferred')
  , resolve       = require('path').resolve
  , readdir       = require('fs2/readdir')
  , readFile      = require('fs2/read-file')
  , webmakeParser = require('webmake/lib/parser')

  , now = Date.now, stringify = JSON.stringify
  , templatePath = resolve(__dirname, 'webmake.tpl')
  , separator = (process.platform === 'win32') ? '/[\\\\/]/' : '\'/\'';

module.exports = exports = function (programPath, tplsPath, buildStamp) {
	var promise, time = now(), parser, programLocalPath;
	if (!buildStamp) buildStamp = (new Date()).toISOString();
	parser = webmakeParser({ cache: true, prettyOutput: false });
	promise = deferred(parser.readInput(programPath),
		tplsPath && readdir(tplsPath, { depth: Infinity, pattern: /\.js$/ })).spread(
		function (path, tpls) {
			programLocalPath = path;
			if (!tpls) return;
			return deferred.map(tpls.map(function (tpl) {
				return resolve(tplsPath, tpl);
			}), parser.readInput, parser);
		}
	)(readFile(templatePath))(function (tpl) {
		var src, appPath = programLocalPath.split('/').slice(0, -2), index, modules, viewModules = {}
		  , appName = appPath[appPath.length - 1];

		src = String(tpl).replace('SEPARATOR', separator)
			.replace('EXTENSIONS', stringify(parser.extNames))
			.replace('APPLICATION_NAME', '[' + stringify(appName) + ']');
		modules = parser.modules;

		forEach(modules, function self(modules, key, root) {
			var viewRoot;
			if (key === 'view') {
				viewRoot = viewModules;
				this.forEach(function (name) {
					if (!viewRoot[name]) viewRoot[name] = {};
					viewRoot = viewRoot[name];
				});
				viewRoot.view = modules;
				delete root.view;
				return;
			}
			if (typeof modules === 'object') forEach(modules, self, this.concat(key));
		}, []);
		index = src.indexOf('INIT_MODULES');
		src = src.slice(0, index) + parser.toString() +
			src.slice(index + 'INIT_MODULES'.length);
		index = src.lastIndexOf('TEMPLATE_MODULES');
		src = src.slice(0, index) + '{\n' +
			webmakeParser.modulesToString.call(viewModules, 2, {}) + '\n\t\t}' +
			src.slice(index + 'TEMPLATE_MODULES'.length);
		src = plainReplace.call(src, '${BUILD_TIMESTAMP}', buildStamp);
		src = plainReplace.call(src, '${APPLICATION_NAME}', appName);
		return src + '(' + stringify(programLocalPath) + ');\n';
	}).aside(function () {
		promise.parser = parser;
		promise.time = now() - time;
	});
	return promise;
};
