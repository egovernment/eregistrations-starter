'use strict';

var memoize      = require('memoizee/plain')
  , serialize    = require('dbjs/_setup/serialize/value')
  , DbjsFragment = require('dbjs-fragment')
  , Fragment     = require('data-fragment')
  , db           = require('../../').db

  , User = db.User, Role = db.Role;

var handleRole = function (role, fragment, obj) {
	var meta = Role.meta.get(role), userFragment = meta.access(obj);
	if (userFragment) fragment.sets.add(userFragment);
};

var unhandleRole = function (role, fragment, obj) {
	var meta = Role.meta.get(role), userFragment = meta.access(obj);
	if (userFragment) fragment.sets.delete(userFragment);
};

var getObjFragment = memoize(function (obj) {
	var dbjsFragment = new DbjsFragment(), roleObservable = obj._currentRoleResolved;
	if (roleObservable.value) handleRole(roleObservable.value, dbjsFragment, obj);
	roleObservable.on('change', function (event) {
		if (event.newValue) handleRole(event.newValue, dbjsFragment, obj);
		if (event.oldValue) unhandleRole(event.oldValue, dbjsFragment, obj);
	});
	var fragment = new Fragment();
	dbjsFragment.forEach(function (obj) {
		var event = obj._lastOwnEvent_, id = obj.__valueId__;
		fragment.update(id, { stamp: event.stamp, value: serialize(event.value) });
	});
	dbjsFragment.on('update', function (event) {
		fragment.update(event.object.__valueId__,
			{ stamp: event.stamp, value: serialize(event.value) });
	});
	dbjsFragment.on('delete', function (id) { fragment.delete(id); });
	return fragment;
}, { normalizer: function (args) { return args[0].__id__; } });

module.exports = function (appId) {
	var user = User.getById(appId.split('.')[0]);
	if (!user) return new Fragment();
	return getObjFragment(user);
};
