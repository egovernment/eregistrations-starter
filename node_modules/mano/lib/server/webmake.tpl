// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function () {
	var require = (function (modules) {
		var resolve, getRequire, wmRequire, notFoundError, findFile
		  , extensions = EXTENSIONS
		  , envRequire = typeof require === 'undefined' ? null : require
		  , initRequire;

		notFoundError = function (path) {
			var error = new Error("Could not find module '" + path + "'");
			error.code = 'MODULE_NOT_FOUND';
			return error;
		};
		findFile = function (scope, name, extName) {
			var i, ext;
			if (typeof scope[name + extName] === 'function') return name + extName;
			for (i = 0; (ext = extensions[extName][i]); ++i) {
				if (typeof scope[name + ext] === 'function') return name + ext;
			}
			return null;
		};
		resolve = function (scope, tree, path, fullPath, state, id) {
			var name, dir, exports, module, fn, found, i, ext;
			path = path.split(SEPARATOR);
			name = path.pop();
			if ((name === '.') || (name === '..')) {
				path.push(name);
				name = '';
			}
			while ((dir = path.shift()) != null) {
				if (!dir || (dir === '.')) continue;
				if (dir === '..') {
					scope = tree.pop();
					id = id.slice(0, id.lastIndexOf('/'));
				} else {
					tree.push(scope);
					scope = scope[dir];
					id += '/' + dir;
				}
				if (!scope) throw notFoundError(fullPath);
			}
			if (name && (typeof scope[name] !== 'function')) {
				found = findFile(scope, name, '.js');
				if (!found) found = findFile(scope, name, '.json');
				if (!found) found = findFile(scope, name, '.css');
				if (!found) found = findFile(scope, name, '.html');
				if (found) {
					name = found;
				} else if ((state !== 2) && (typeof scope[name] === 'object')) {
					tree.push(scope);
					scope = scope[name];
					id += '/' + name;
					name = '';
				}
			}
			if (!name) {
				if ((state !== 1) && scope[':mainpath:']) {
					return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
				}
				return resolve(scope, tree, 'index', fullPath, 2, id);
			}
			fn = scope[name];
			if (!fn) throw notFoundError(fullPath);
			if (fn.hasOwnProperty('module')) return fn.module.exports;
			exports = {};
			fn.module = module = { exports: exports, id: id + '/' + name };
			fn.call(exports, exports, module, getRequire(scope, tree, id));
			return module.exports;
		};
		wmRequire = function (scope, tree, fullPath, id) {
			var name, path = fullPath, t = fullPath.charAt(0), state = 0;
			if (t === '/') {
				path = path.slice(1);
				scope = modules['/'];
				if (!scope) {
					if (envRequire) return envRequire(fullPath);
					throw notFoundError(fullPath);
				}
				id = '/';
				tree = [];
			} else if (t !== '.') {
				name = path.split('/', 1)[0];
				scope = modules[name];
				id = name;
				if (!scope) {
					if (envRequire) return envRequire(fullPath);
					throw notFoundError(fullPath);
				}
				tree = [];
				path = path.slice(name.length + 1);
				if (!path) {
					path = scope[':mainpath:'];
					if (path) {
						state = 1;
					} else {
						path = 'index';
						state = 2;
					}
				}
			}
			return resolve(scope, tree, path, fullPath, state, id);
		};
		getRequire = function (scope, tree, id) {
			return function (path) {
				return wmRequire(scope, [].concat(tree), path, id);
			};
		};
		initRequire = getRequire(modules, [], '');
		initRequire.modules = modules;
		return initRequire;
	})(INIT_MODULES);

	(function () {
		var a, abbr, address, area, article, aside, audio, b, bdi, bdo,
		blockquote, br, button, canvas, caption, cite, code, col, colgroup, command,
		content, data, datalist, dd, del, details, dfn, dialog, div, dl, dt, em, embed, fieldset,
		figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header,
		hr, i, iframe, img, input, ins, kbd, label, legend, li, link, main, map,
		mark, menu, menuitem, meta, meter, nav, noscript, object, ol, optgroup, option, output, p,
		param, pre, progress, q, rp, rt, ruby, s, samp, script, section, select,
		small, source, span, strong, style, sub, summary, sup, table, tbody, td, template,
		textarea, tfoot, th, thead, time, tr, track, u, ul, _var, video, wbr, comment,
		text, element, insert, normalize, _if, and, browser, disabler, eq, eqSloppy, eqSome, field,
		gt, gtOrEq, html, legacy, list, lt, ltOrEq, md, mdi, mmap, modal, not, or, postButton,
		resolve, stUrl, thumb, uploadButton, url, ns;

		var viewModules = TEMPLATE_MODULES;

		var objForEach = require('es5-ext/object/for-each');
		objForEach(viewModules, function self(modules, key) {
			if (key === 'view') {
				this[key] = modules;
				return;
			}
			if (!this[key]) this[key] = {};
			objForEach(modules, self, this[key]);
		}, require.modules);

		require('mano/lib/client/implement-es');
		var domjs = require('mano/lib/client/domjs');
		ns = domjs.ns;
		domjs.refreshViewNs = function () {
			a = ns.a; abbr = ns.abbr; address = ns.address; area = ns.area; article = ns.article;
			aside = ns.aside; audio = ns.audio; b = ns.b; bdi = ns.bdi; bdo = ns.bdo;
			blockquote = ns.blockquote; br = ns.br; button = ns.button; canvas = ns.canvas;
			caption = ns.caption; cite = ns.cite; code = ns.code; col = ns.col; colgroup = ns.colgroup;
			command = ns.command; content = ns.content; data = ns.data; datalist = ns.datalist;
			dd = ns.dd; del = ns.del; details = ns.details; dfn = ns.dfn; dialog = ns.dialog;
			div = ns.div; dl = ns.dl; dt = ns.dt; em = ns.em; embed = ns.embed; fieldset = ns.fieldset;
			figcaption = ns.figcaption; figure = ns.figure; footer = ns.footer; form = ns.form;
			h1 = ns.h1; h2 = ns.h2; h3 = ns.h3; h4 = ns.h4; h5 = ns.h5; h6 = ns.h6; header = ns.header;
			hr = ns.hr; i = ns.i; iframe = ns.iframe; img = ns.img; input = ns.input; ins = ns.ins;
			kbd = ns.kbd; label = ns.label; legend = ns.legend; li = ns.li;
			link = ns.link; main = ns.main; map = ns.map; mark = ns.mark; menu = ns.menu;
			menuitem = ns.menuitem; meta = ns.meta; meter = ns.meter; nav = ns.nav;
			noscript = ns.noscript; object = ns.object; ol = ns.ol; optgroup = ns.optgroup;
			option = ns.option; output = ns.output; p = ns.p; param = ns.param;
			pre = ns.pre; progress = ns.progress; q = ns.q; rp = ns.rp; rt = ns.rt; ruby = ns.ruby;
			s = ns.s; samp = ns.samp; script = ns.script; section = ns.section; select = ns.select;
			small = ns.small; source = ns.source; span = ns.span; strong = ns.strong; style = ns.style;
			sub = ns.sub; summary = ns.summary; sup = ns.sup; table = ns.table; tbody = ns.tbody;
			td = ns.td; template = ns.template; textarea = ns.textarea; tfoot = ns.tfoot; th = ns.th;
			thead = ns.thead; time = ns.time; tr = ns.tr; track = ns.track; u = ns.u; ul = ns.ul;
			_var = ns._var; video = ns.video; wbr = ns.wbr; comment = ns.comment; text = ns.text;
			element = ns.element; insert = ns.insert; normalize = ns.normalize; _if = ns._if;
			and = ns.and; browser = ns.browser; disabler = ns.disabler; eq = ns.eq;
			eqSloppy = ns.eqSloppy; eqSome = ns.eqSome; field = ns.field; gt = ns.gt;
			gtOrEq = ns.gtOrEq; html = ns.html; legacy = ns.legacy; list = ns.list; lt = ns.lt;
			ltOrEq = ns.ltOrEq; md = ns.md; mdi = ns.mdi; mmap = ns.mmap; modal = ns.modal;
			not = ns.not; or = ns.or; postButton = ns.postButton; resolve = ns.resolve;
			stUrl = ns.stUrl; thumb = ns.thumb; uploadButton = ns.uploadButton; url = ns.url;
		};
		domjs.refreshViewNs();
	}());

	return require;
}())