'use strict';

var customError     = require('es5-ext/error/custom')
  , isCallable      = require('es5-ext/object/is-callable')
  , isEmpty         = require('es5-ext/object/is-empty')
  , forEach         = require('es5-ext/object/for-each')
  , value           = require('es5-ext/object/valid-value')
  , callable        = require('es5-ext/object/valid-callable')
  , endsWith        = require('es5-ext/string/#/ends-with')
  , deferred        = require('deferred')
  , dbjsDOMInput    = require('dbjs-dom/input')
  , validateHandler = require('../utils/validate-controller-handler')
  , validate        = require('../utils/controller-validate')
  , sendOk          = require('./utils/send-ok')
  , sendJSON        = require('./utils/send-json')
  , sendError       = require('./utils/send-error')

  , build, processResult;

processResult = function (result, env) {
	var promise = deferred(result);
	promise.done(function (result) {
		if (!result || (result === true)) {
			sendOk.call(env.res);
		} else if (typeof result === 'string') {
			sendError.call(env.res, customError("String result not supported",
				'NOT_SUPPORTED', { statusCode: 400 }));
		} else {
			if (result.headers) {
				forEach(result.headers, function (value, name) {
					env.res.setHeader(name, value);
				});
				delete result.headers;
			}
			if (result.statusCode) {
				env.res.statusCode = result.statusCode;
				delete result.statusCode;
			}
			if (isEmpty(result)) {
				env.res.end();
				return;
			}
			sendJSON.call(env.res, result);
		}
	}, sendError.bind(env.res));
	return promise;
};

build = function (name, common, server) {
	var controller;
	(value(common) && callable(server));
	controller = function (data, env) {
		var result;
		try { validate(common, data, env); } catch (e) {
			sendError.call(env.res, e);
			return;
		}
		try { result = server(data, env); } catch (e2) {
			sendError.call(env.res, e2);
			return;
		}
		return processResult(result, env);
	};
	if (endsWith.call(name, '&')) {
		callable(common.match);
		callable(common.load);
		controller = {
			match: common.match,
			load: controller
		};
		common = common.load;
	}
	return controller;
};

module.exports = exports = function (db, common, server) {
	var routes = {};
	dbjsDOMInput(db);
	common = Object(common);
	server = Object(server);

	// Validate common
	forEach(common, function (handler, name) {
		validateHandler(handler, endsWith.call(name, '&'));
		if (!isCallable(server[name])) {
			throw customError("Missing server handler '" + name + "' route", 'MISSING_HANDLER');
		}
	});

	// Validate server
	forEach(server, function (handler, name) {
		if (common.hasOwnProperty(name)) return;
		if (endsWith.call(name, '&')) {
			callable(handler && handler.match);
			if (handler.validate) callable(handler.controller);
			else callable(handler.load);
			return;
		}
		if (!handler || !handler.validate) {
			throw customError("Not supported handler for '" + name + "' route", 'WRONG_HANDLER');
		}
		callable(handler.controller);
	});

	forEach(common, function (handler, name) {
		routes[name] = build(name, handler, server[name]);
	});

	forEach(server, function (handler, name) {
		var controller;
		if (routes.hasOwnProperty(name)) return;
		if (endsWith.call(name, '&')) {
			routes[name] = { match: handler.match };
			if (handler.load) handler = handler.load;
		}
		controller = function (data, env) {
			var result;
			try { validate(handler.validate, data, env); } catch (e) {
				sendError.call(env.res, e);
				return;
			}
			try { result = handler.controller(data, env); } catch (e2) {
				sendError.call(env.res, e2);
				return;
			}
			return processResult(result, env);
		};
		if (routes.hasOwnProperty(name)) routes[name].load = controller;
		else routes[name] = controller;
	});

	return routes;
};

exports.build = build;
