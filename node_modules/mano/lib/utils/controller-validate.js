'use strict';

var customError = require('es5-ext/error/custom')
  , isCallable  = require('es5-ext/object/is-callable')
  , forEach     = require('es5-ext/object/for-each')
  , getMessage  = require('./get-error-message');

require('dbjs-dom/input')(require('../../').db);

module.exports = function (controller, data, match) {
	var errors;
	if (isCallable(controller)) {
		controller(data, match);
		return;
	}
	errors = [];
	forEach(controller, function (handler, name) {
		var nu, error;
		if ((handler._kind_ === 'object') && (typeof handler === 'function')) {
			data[name] = handler.fromInputValue(data[name]);
			if (data[name] == null) {
				error = new TypeError("Missing value");
				error.code = 'NULL_VALUE';
				error.fieldName = name;
				errors.push(error);
				return;
			}
			try {
				data[name] = handler.validate(data[name]);
			} catch (e) {
				e.fieldName = name;
				errors.push(e);
			}
			return;
		}
		try {
			nu = handler(data, match);
			if (nu !== undefined) data[name] = nu;
		} catch (e) {
			e.fieldName = name;
			errors.push(e);
		}
	});
	if (errors.length) {
		throw customError("Invalid values:\n\t" +
			errors.map(getMessage).join('\t\n'), 'INVALID_INPUT',
			{ errors: errors, statusCode: 400 });
	}
};
