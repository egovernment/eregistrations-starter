'use strict';

var arrIncludes = require('es5-ext/array/#/contains')
  , strIncludes = require('es5-ext/string/#/contains')
  , forEach     = require('es5-ext/object/for-each')
  , db          = require('../../').db

  , isArray = Array.isArray
  , unserializeObject = db.objects.unserialize, isObjectType = db.isObjectType;

module.exports = function (data) {
	forEach(data, function (value, name) {
		var target, Type, isMap = false, descProto, map;
		if (!strIncludes.call(name, '/')) return;
		target = unserializeObject(name);
		if (target._kind_ !== 'descriptor') {
			throw new TypeError("Unsupported dbjs update");
		}
		if (target.nested) {
			map = target.object.get(target.key);
			descProto = map.__descriptorPrototype__;
			if (db.isObjectType(descProto.type)) {
				isMap = true;
				Type = descProto.type;
			} else {
				Type = target.type;
			}
		} else {
			Type = target.type;
		}
		if (isObjectType(Type)) {
			if (isArray(value)) {
				if (isMap) {
					map.forEach(function (item) {
						if (!arrIncludes.call(value, item)) item._destroy_();
					});
				}
				value.forEach(function (val, index) {
					if (db.Object.is(val)) return;
					if (isMap) {
						map.newUniq()._initialize_(val);
					} else {
						value[index] = new Type(val);
					}
				});
			} else if (value == null) {
				if (target.nested) {
					target.object._get_(target._sKey_)._destroy_();
					return;
				}
			} else if (!db.Object.is(value)) {
				if (target.nested) {
					target.object._get_(target._sKey_)._initialize_(value);
					return;
				}
				value = new Type(value);
			}
		}
		if (isMap) return;
		if (value === undefined) {
			target.object._delete_(target._sKey_);
		} else {
			target.object._set_(target._sKey_, value);
		}
	});
};
