'use strict';

var remove   = require('es5-ext/array/#/remove')
  , copy     = require('es5-ext/object/copy')
  , assign   = require('es5-ext/object/assign')
  , forEach  = require('es5-ext/object/for-each')
  , toArray  = require('es5-ext/object/to-array')
  , ee       = require('event-emitter')
  , nextTick = require('next-tick')

  , hasOwnProperty = Object.prototype.hasOwnProperty
  , create = Object.create, keys = Object.keys

  , compareEvents, Sync;

compareEvents = function (a, b) {
	if (a[0] === '-') {
		if (b[0] !== '-') return 1;
	} else if (b[0] === '-') {
		return -1;
	}
	return a.localeCompare(b);
};

module.exports = Sync = function (remote) {
	this._remote = remote;
	this._dirty = create(null);
	this._size = 0;
	this._send = this._send.bind(this);
	this._sent = {};
	remote.on('connect', this._schedule.bind(this));
};

ee(assign(Sync.prototype, {
	update: function (id, event) {
		if (!hasOwnProperty.call(this._dirty, id)) ++this._size;
		this._dirty[id] = event;
		this._schedule();
		this.emit('dirty', this._dirty, this._size);
	},
	remove: function (id) {
		if (!hasOwnProperty.call(this._dirty, id)) ++this._size;
		this._dirty[id] = null;
		this._schedule();
		this.emit('dirty', this._dirty, this._size);
	},
	reset: function (data) {
		var current, changed, dirty = this._dirty;
		current = keys(dirty);
		if (data == null) {
			if (!current.length) return;
			current.forEach(function (id) { delete dirty[id]; });
			this._size = 0;
			this.emit('dirty', dirty, 0);
			return;
		}
		forEach(data, function (event, id) {
			var local;
			if (hasOwnProperty.call(dirty, id)) {
				remove.call(current, id);
				local = dirty[id];
				if (event && local) {
					if ((event.value === local.value) || (event.stamp === local.stamp)) {
						return;
					}
				} else if (!event && !local) {
					return;
				}
			} else {
				++this._size;
			}
			changed = true;
			dirty[id] = event;
		}, this);
		current.forEach(function (id) {
			delete dirty[id];
			--this._size;
		}, this);
		if (changed) this._schedule();
		if (changed || current.length) this.emit('dirty', dirty, this._size);
	},
	_schedule: function () {
		if (this._scheduled || !this._size) return;
		this._scheduled = true;
		nextTick(this._send);
	},
	_send: function () {
		var stage, data;
		this._scheduled = false;
		if (!this._size) return;
		if (!this._remote.connection) return;
		stage = copy(this._dirty);
		data = toArray(this._dirty, function (event, id) {
			return event ? (event.stamp + '.' + id + '.' + event.value) : '-' + id;
		}).sort(compareEvents);
		this._remote.connection.send('dbupdate', data).done(function () {
			forEach(stage, function (event, id) {
				this._remote.confirm(id, event);
				if (event != null) {
					if (!this._dirty[id]) return;
					if (this._dirty[id] !== event) return;
				} else if (this._dirty[id] !== null) {
					return;
				}
				delete this._dirty[id];
				--this._size;
			}, this);
			this.emit('dirty', this._dirty, this._size);
		}.bind(this), function () { stage = null; });
	},
	clear: function (id) {
		if (!hasOwnProperty.call(this._dirty, id)) return;
		delete this._dirty[id];
		--this._size;
		this.emit('dirty', this._dirty, this._size);
	}
}));
