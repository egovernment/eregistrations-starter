'use strict';

var flatten     = require('es5-ext/array/#/flatten')
  , validObject = require('es5-ext/object/valid-object')
  , validValue  = require('es5-ext/object/valid-value')
  , startsWith  = require('es5-ext/string/#/starts-with')
  , splitId     = require('dbjs/_setup/unserialize/id')

  , isProtoPrefix = RegExp.prototype.test.bind(/^[A-Z][a-zA-Z0-9]*#$/)
  , isArray = Array.isArray;

module.exports = function (data, prefixes) {
	var pass;
	(validObject(data) && validValue(prefixes));
	pass = {};
	if (!isArray(prefixes)) prefixes = [prefixes];
	prefixes = flatten.call(prefixes.map(function (prefix) {
		var className, prefixes;
		if (!isProtoPrefix(prefix)) return prefix;
		prefixes = [prefix];
		className = prefix.slice(0, -1);
		while (data.inheritance[className]) {
			className = data.inheritance[className];
			prefixes.push(className + '#');
		}
		return prefixes;
	}));

	data.properties.forEach(function (id) {
		var i, l, path, current;
		if (!prefixes.some(function (prefix) { return startsWith.call(id, prefix); })) {
			return;
		}
		id = splitId(id).slice(1);
		for (i = 0, l = id.length; i < l; i += 2) {
			if (id[0] === '*') break;
			current = id[i + 1];
			if (current) {
				if (path) path += '/' + current;
				else path = current;
				pass[path] = 1;
			}
			if (id[i] === '$') break;
		}
	});
	return pass;
};
