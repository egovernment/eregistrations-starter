'use strict';

var forEach    = require('es5-ext/object/for-each')
  , map        = require('es5-ext/object/map')
  , startsWith = require('es5-ext/string/#/starts-with')
  , ee         = require('event-emitter')
  , nextTick   = require('next-tick')
  , serialize  = require('dbjs/_setup/serialize/value')
  , mano       = require('../../')
  , Sync       = require('../utils/sync')
  , xhr        = require('./xhr-driver')
  , sse        = require('./sse-driver')
  , lsPrefix   = require('./local-storage-driver').prefix

  , keys = Object.keys
  , parse = JSON.parse, stringify = JSON.stringify
  , server = ee(exports)
  , ignoredSources = { storage: true, server: true, 'server-temporary': true }
  , db = mano.db

  , sync, connection, reset, updateSync;

require('deferred/ext/promise/aside');

server.confirm = function (id, event) {
	if (!event) return;
	if (event.value !== '') return;
	if (!localStorage[lsPrefix + id]) return;
	if (!startsWith.call(localStorage[lsPrefix + id], event.stamp + '.')) return;
	delete localStorage[lsPrefix + id];
};
server.isSync = false;

// Setup server
sse.on('open', function () {
	server.connection = connection;
	server.emit('connect');
});
sse.on('error', function () {
	server.connection = null;
	server.emit('disconnect');
});

sse.on('close', function () {
	server.connection = null;
	server.emit('disconnect');
});

updateSync = server.updateSync = function (hash) {
	if (!localStorage._id || localStorage._dirty || !sse.isSync) {
		server.isSync = false;
		return;
	}
	server.isSync = true;
	server.emit('sync', hash);
};
sse.on('sync', updateSync);

connection = {
	send: function (action, data) {
		return xhr.post('/' + action + '/', { data: data.join('\n') })
			.aside(function (hash) {
				nextTick(function () {
					if (hash && (hash !== 'OK')) updateSync(hash);
				});
			}, function (err) {
				nextTick(function () { throw err; });
			});
	}
};

if (sse.source && (sse.source.readyState === 1)) server.connection = connection;

// Setup sync
server.sync = sync = new Sync(server);

db.objects.on('update', function (event) {
	if (ignoredSources[event.sourceId]) return;
	if (serialize(event.value) == null) {
		console.log("Errorneus event", event);
		throw new TypeError(event.value + " is not serializable dbjs value");
	}
	sync.update(event.object.__valueId__, { stamp: event.stamp, value: serialize(event.value) });
});

sync.on('dirty', function (dirty) {
	var ids = keys(dirty), stringified;
	if (!ids.length) {
		delete localStorage._dirty;
		return;
	}
	server.isSync = false;
	stringified = stringify(map(dirty, function (event) {
		return event ? (event.stamp + '.' + event.value) : null;
	}));
	if (localStorage._dirty === stringified) return;
	localStorage._dirty = stringified;
});

reset = function () {
	var nuDirty = {};
	forEach(parse(localStorage._dirty), function (value, id) {
		var index;
		if (value) {
			try {
				index = value.indexOf('.');
				value = { stamp: value.slice(0, index), value: value.slice(index + 1) };
			} catch (e) {
				console.log(id, value);
				console.error("Errorneus event data");
				return;
			}
		}
		nuDirty[id] = value;
	});
	sync.reset(nuDirty);
	server.isSync = false;
};

if (localStorage._dirty) reset();

window.addEventListener('storage', function (e) {
	var key = e.key;

	if (key !== '_dirty') return;
	if (e.newValue && localStorage._dirty) reset();
	else sync.reset();
});
