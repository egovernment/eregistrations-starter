'use strict';

var once        = require('timers-ext/once')
  , serialize   = require('dbjs/_setup/serialize/value')
  , unserialize = require('dbjs/_setup/unserialize/value')
  , xhr         = require('./xhr-driver')
  , mano        = require('../../')
  , clientId    = require('./client-id')

  , keys = Object.keys
  , db = mano.db, dbObjects = db.objects, getObject = dbObjects.unserialize
  , isOldDbId = RegExp.prototype.test.bind(/^[0-9A-Za-z]+(?::|$)/)
  , isDelValue = RegExp.prototype.test.bind(/^\d+\.$/)
  , load, count = 0, time, Event, prefix = 'È¸', removedCount = 0
  , events = [], logEvents, storageEvents, localClear;

require('deferred/ext/promise/finally');

Object.defineProperty(db, '__storageEvents__', { value: storageEvents = [] });
logEvents = once(function () {
	var l = events.length, msg;
	msg = "Data update [" + events.length +
		" propert" + ((l === 1) ? "y" : "ies") + "]";
	storageEvents.unshift(events);
	if (console.groupCollapsed) {
		console.groupCollapsed(msg);
		console.log(events.join("\n"));
		console.groupEnd();
	} else {
		console.log(msg);
	}
	events = [];
});

exports.prefix = prefix;

(function (Proto) {
	Event = function (obj, value, stamp) {
		return Proto.call(this, obj, value, stamp);
	};
	Event.prototype = Object.create(Proto.prototype);
	Event.prototype.constructor = Event;
	Event.prototype.sourceId = 'storage';
}(require('dbjs/_setup/event')));

if (localStorage._id !== clientId) {
	// IE emits own localStorage events, we need to indicate it's made locally
	// so it doesn't reload the page
	localClear = true;
	localStorage.clear();

	// Reset stage on server
	xhr.post('/data-initialization/', {}).finally(function () {
		localClear = false;
	}).done(function (hash) {
		localStorage._id = clientId;
		if (hash && (hash !== 'OK')) require('./server-sync').updateSync(hash);
	});
}

if (localStorage._reload) delete localStorage._reload;

exports.load = load = function (id, data) {
	var stamp, value, obj;
	stamp = Number(data.split('.', 1)[0]);
	try {
		value = unserialize(data.slice(String(stamp).length + 1), dbObjects);
	} catch (e) {
		console.error("Invalid value in storage: " + id + " " + data);
		delete localStorage[prefix + id];
		return;
	}
	if (value === undefined) {
		console.warn("Undefined value in localStorage: " + id + " "  + data);
		return;
	}
	obj = getObject(id, value && value.constructor);
	if (obj == null) return;
	if (obj._lastOwnEvent_ && (obj._lastOwnEvent_.stamp === stamp)) return;
	return new Event(obj, value, stamp); //jslint: skip
};

if (!mano.noData) {
	time = Date.now();
	db._postponed_ += 1;
	keys(localStorage).forEach(function (key) {
		var data = localStorage[key];
		if (typeof data !== 'string') return; // `length` in Opera
		if (key[0] !== prefix) {
			// Temporary: clear old dbjs storage
			if (isOldDbId(key) && (data.indexOf('.') > -1)) {
				delete localStorage[key];
				++removedCount;
			}
			return;
		}
		load(key.slice(1), data);
		++count;
	});
	db._postponed_ -= 1;
	if (removedCount) console.log("Removed " + removedCount + " old dbjs keys");
	console.log("Data restore: " + count + " properties in " +
		((Date.now() - time) / 1000).toFixed(3) + "s");

	db.objects.on('update', function (event) {
		var value;
		if (event.sourceId === 'storage') return;
		if (event.sourceId === 'server-temporary') return;
		if ((event.value === undefined) && (event.sourceId === 'server')) {
			delete localStorage[prefix + event.object.__valueId__];
			events.push(event.object.__valueId__ + " [deleted]");
			logEvents();
			return;
		}
		value = serialize(event.value);
		if (value == null) {
			console.log("Errorneus event", event);
			throw new TypeError(value + " is not serializable dbjs value");
		}
		localStorage[prefix + event.object.__valueId__] = event.stamp + '.' + value;
		events.push(event.object.__valueId__ + " " + event.stamp + " " + value);
		logEvents();
	});
}

db.objects.on('delete', function (id) {
	var value = localStorage[prefix + id];
	if (!value) return;
	delete localStorage[prefix + id];
	if (isDelValue(value)) return;
	events.push(id + " [removed from client]");
	logEvents();
});

window.addEventListener('storage', function (e) {
	var key = e.key;

	if (!key) {
		// localStorage.clear() and reason unknown, die!
		if (!localClear) location.reload();
		return;
	}

	// Ignore no changes
	if (e.newValue === e.oldValue) return;

	if (key === '_id') {
		if (e.newValue !== clientId) {
			// Client ID manipulated, die!
			location.reload();
		}
		return;
	}

	if (key === '_reload') {
		if (!e.newValue) return;

		console.log("Request from other tab for reload", e.newValue);
		// Obey
		delete localStorage._reload;
		if (e.newValue === '1') location.reload();
		else location.href = e.newValue;
		return;
	}

	if (key === '_authenticated') {
		if (e.newValue) {
			if (db.$user && (db.$user.__id__ === e.newValue)) return;
		} else if (!db.$user) {
			return;
		}
		location.href = '/';
		return;
	}

	if (key[0] !== prefix) return;

	key = key.slice(1);
	if (!e.newValue) {
		// Object removed from local database
		// Ignore (we do not remove records locally, they're not loaded after reload)
		return;
	}

	if (mano.noData) return;

	// Update from other tab
	load(key, e.newValue);
});
