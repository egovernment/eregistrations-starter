'use strict';

var customError = require('es5-ext/error/custom')
  , isCallable  = require('es5-ext/object/is-callable')
  , callable    = require('es5-ext/object/valid-callable')
  , forEach     = require('es5-ext/object/for-each')
  , contains    = require('es5-ext/string/#/contains')
  , endsWith    = require('es5-ext/string/#/ends-with')
  , dispatchEvt = require('dom-ext/html-element/#/dispatch-event-2')
  , deferred    = require('deferred')
  , db          = require('../../').db
  , valHandler  = require('../utils/validate-controller-handler')
  , validate    = require('../utils/controller-validate')
  , formStatus  = require('./utils/form-status')
  , processResp = require('./utils/process-xhr-response')
  , post        = require('./xhr-driver').post

  , getObject = db.objects.unserialize
  , showError = formStatus.showError, processResult
  , unserialize;

unserialize = function (data) {
	forEach(data, function (value, name) {
		var desc, index;
		if (!contains.call(name, '/')) return;
		desc = getObject(name);
		if (desc.multiple) {
			if (value && value.forEach) {
				index = 0;
				value.forEach(function (value) {
					data[name + '[' + (index++) + ']'] = desc.type.toInputValue(value);
				});
				delete data[name];
			}
		} else {
			data[name] = desc.type.toInputValue(value);
		}
	});
	return data;
};

processResult = function (url, data, env) {
	var promise, xhrCall;
	promise = deferred(url)(function (url) {
		env.form.reset();
		dispatchEvt.call(env.form, 'reset');
		if (!url) return;
		xhrCall = true;
		return post(String(url), env.noDbjs ? data : unserialize(data));
	});
	promise.done(function (data) {
		if (xhrCall) processResp.call(env.form, data);
	}, showError.bind(env.form));
	return promise;
};

module.exports = function (common, client) {
	var routes = {};
	common = Object(common);
	client = Object(client);

	// Validate common
	forEach(common, function (handler, name) {
		valHandler(handler, endsWith.call(name, '&'));
	});

	// Validate client
	forEach(client, function (handler, name) {
		if (endsWith.call(name, '&') && !common.hasOwnProperty(name)) {
			callable(handler && handler.match);
			if (handler.validate) callable(handler.controller);
			else callable(handler.load);
			return;
		}
		if (!isCallable(handler)) {
			if (!handler || common.hasOwnProperty(name) || !handler.validate) {
				throw customError("Not supported handler for '" + name + "' route", 'WRONG_HANDLER');
			}
			callable(handler.controller);
		} else if (!common.hasOwnProperty(name)) {
			throw customError("Not supported handler for '" + name + "' route", 'WRONG_HANDLER');
		}
	});

	forEach(common, function (handler, name) {
		var next = client[name], url, match;
		routes[name] = function (data, env) {
			try { validate(handler, data, env); } catch (e) {
				showError.call(env.form, e);
				return;
			}
			if (next) {
				try { url = next(data, env); } catch (e2) {
					showError.call(env.form, e2);
					return;
				}
			} else {
				url = env.form.action;
			}
			return processResult(url, data, env);
		};
		if (endsWith.call(name, '&')) {
			match = handler.match;
			handler = handler.load;
			routes[name] = {
				match: match,
				load: routes[name]
			};
		}
	});

	forEach(client, function (handler, name) {
		var controller;
		if (routes.hasOwnProperty(name)) return;
		if (endsWith.call(name, '&')) {
			routes[name] = { match: handler.match };
			if (handler.load) handler = handler.load;
		}
		controller = function (data, env) {
			var url;
			try { validate(handler.validate, data, env); } catch (e) {
				showError.call(env.form, e);
				return;
			}
			try { url = handler.controller(data, env); } catch (e2) {
				showError.call(env.form, e2);
				return;
			}
			return processResult(url, data, env);
		};
		if (routes.hasOwnProperty(name)) routes[name].load = controller;
		else routes[name] = controller;
	});

	return routes;
};
