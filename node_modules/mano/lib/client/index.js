'use strict';

if (window.performance && window.performance.now) {
	console.log("Download & compilation:", (performance.now() / 1000).toFixed(3) + "s");
}

console.log("Build timestamp: ${BUILD_TIMESTAMP}");

var startTime = Date.now();

Error.stackTraceLimit = Infinity;

require('./common');
require('../observable-dom');

module.exports = function (options) {
	var formClear = require('./utils/form-status').clear.bind(document)
	  , mano      = require('../../')

	  , loadView, view, router, userId, db = mano.db, server
	  , inSync, isViewGenerated;

	var runDbSync = function () {
		if (inSync && isViewGenerated) {
			if (typeof window.onDbSync === 'function') window.onDbSync();
		}
	};

	window.db = db;
	options = Object(options);
	mano.noData = options.noData;

	// Initialize localization handler
	mano.i18n = require('i18n2')(options.locale);

	// Initialize database
	if (options.schema) options.schema();

	// DBJS DOM bindings setup
	require('./dbjs-dom');

	// Load data from local storage
	require('./local-storage-driver');

	// Initialize Server->Client data stream
	require('./sse-driver');

	// Initialize Client->Server synchronization
	server = require('./server-sync');
	server.once('sync-confirmed', function () {
		inSync = true;
		runDbSync();
	});

	// Initialize Sync guard (resolves eventual sync issues)
	require('./sync-guard');

	// Db update events on document
	require('./dom-app-events');

	// Find authenticated user object
	userId = require('dom-ext/html-document/#/get-cookie')
		.call(document, 'authenticated' + location.port);

	if (userId) localStorage._authenticated = userId;
	else delete localStorage._authenticated;

	// Location controller & router
	router = require('./router')(options);

	loadView = function () {
		var appLocation = window.appLocation = require('./location'), user;
		if (!document.body) {
			setTimeout(loadView, 0);
			return;
		}
		if (userId) {
			user = db.User.getById(userId);
			if (!user) {
				server.once('sync', loadView);
				console.log(".. Waiting for user data ..");
				return;
			}
			Object.defineProperty(db, '$user', { configurable: true, value: user });
			router.user = user;
		}

		if (options.postData) options.postData();

		view = require('./view')(options.viewRequire);
		options.routes(router, view);

		router.update();
		if (location.hash) appLocation.goto(location.pathname + location.search + location.hash);
		if (window.performance && window.performance.now) {
			console.log("Total load time:", (performance.now() / 1000).toFixed(3) + "s");
		} else {
			console.log("Application load time:", ((Date.now() - startTime) / 1000).toFixed(3) + "s");
		}
		view.on('load', formClear);
		view.on('load', function () { document.emit('pageload'); });
		document.addEventListener('submit', formClear, true);
		document.emit('mano:load');

		isViewGenerated = true;
		runDbSync();
	};
	if (localStorage._id) loadView();
	else server.once('sync', loadView);
};
