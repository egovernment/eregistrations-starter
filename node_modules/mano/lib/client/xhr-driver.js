'use strict';

var assign    = require('es5-ext/object/assign')
  , deferred  = require('deferred/deferred')
  , stringify = require('querystring2/stringify')
  , urlFormat = require('url3/format')
  , urlParse  = require('url3/parse')
  , sessionId = require('./session-id')

  , jsonParse = JSON.parse
  , isFormDataImplemented = (typeof FormData !== 'undefined')
  , send, getType, lastPromise;

getType = function (xhr) {
	var type = xhr.getResponseHeader('Content-Type'), index;
	if (!type) return type;
	index = type.indexOf(';');
	if (index === -1) return type;
	return type.slice(0, index);
};

send = function (method, url, data) {
	var xhr = new XMLHttpRequest(), def = deferred();

	xhr.open(method, url, true);
	xhr.onload = function () {
		var type, result, error;
		type = getType(xhr);
		if (type === 'application/json') {
			try {
				result = jsonParse(xhr.responseText);
			} catch (e) {
				console.log("Bad JSON:", xhr.responseText);
				def.reject(e);
				return;
			}
		} else {
			result = xhr.responseText;
		}
		if ((xhr.status < 200) || (xhr.status >= 300)) {
			if (result.message) error = assign(new Error(result.message), result);
			else error = new Error(result);
			def.reject(error);
			return;
		}
		def.resolve(result);
	};
	xhr.onerror = function () { def.reject(new Error("Error occured")); };
	xhr.onabort = function () {
		console.warn("XHR Operation aborted (Ok, if request aborted on purpose)");
	};
	if (xhr.upload) xhr.upload.onabort = xhr.onabort;

	xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
	xhr.setRequestHeader("X-Browser-Session", sessionId);
	if ((method === 'POST') && (!isFormDataImplemented || !(data instanceof FormData))) {
		xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
	}
	if (data) {
		xhr.send((isFormDataImplemented && (data instanceof FormData)) ? data : stringify(data));
	} else {
		xhr.send();
	}

	return def.promise;
};

exports.post = function (url, data) {
	var cb = function () { return (lastPromise = send('POST', url, data)); };
	console.log("Client -> Server", 'POST', url);
	return deferred(lastPromise)(cb, cb);
};

exports.get = function (url, data) {
	var urlObj;
	console.log("Client -> Server", 'GET', url);
	if (data) {
		urlObj = urlParse(url, true);
		assign(urlObj.query, data);
		url = urlFormat(urlObj);
	}
	return send('GET', url);
};

exports.send = send;
