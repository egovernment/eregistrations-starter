'use strict';

var generateHash = require('murmurhash-js/murmurhash3_gc')
  , server       = require('./server-sync')
  , xhr          = require('./xhr-driver')
  , ls           = require('./local-storage-driver')
  , mano         = require('../../')

  , db = mano.db, unserializeObject = db.objects.unserialize
  , isDelValue = RegExp.prototype.test.bind(/^\d+\.$/)
  , lsPrefix = ls.prefix
  , keys = Object.keys, send;

send = function () {
	var data = keys(localStorage).filter(function (key) {
		if (key[0] !== lsPrefix) return false;
		return !isDelValue(localStorage[key]);
	}).map(function (key) {
		var value = localStorage[key];
		return value.slice(0, value.indexOf('.')) + '.' + key.slice(1);
	});
	xhr.post('/sync-confirm/', { data: data.join('\n') }).done(function (data) {
		if (data === 'OK') {
			console.log("Sync guard: all confirmed as OK");
			server.emit('sync-confirmed');
			return;
		}
		if (data.obsolete) {
			console.error("Sync guard: Found obsolete data (so cleared locally)");
			if (console.groupCollapsed) {
				console.groupCollapsed("Obsolete records [" + data.obsolete.length + "]");
				console.log(data.obsolete.join('\n'));
				console.groupEnd();
			} else {
				console.error(data.obsolete.join('\n'));
			}
			data.obsolete.forEach(function (id) {
				db.objects.emit('delete', id);
			});
		}
		if (data.missing) {
			console.error("Sync guard: Missing data detected (so resend from server)");
			if (console.groupCollapsed) {
				console.groupCollapsed("Missing records [" + data.missing.length + "]");
				console.log(data.missing.join('\n'));
				console.groupEnd();
			} else {
				console.error(data.missing.join('\n'));
			}
		}
		if (data.unsync) {
			console.error("Sync guard: Not in sync data detected (so retaken from server");
			if (console.groupCollapsed) {
				console.groupCollapsed("Not in sync records [" + data.unsync.length + "]");
				console.log(data.unsync.join('\n'));
				console.groupEnd();
			} else {
				console.error(data.unsync.join('\n'));
			}
			data.unsync.forEach(function (id) {
				var obj;
				if (mano.noData) {
					delete localStorage[lsPrefix + id];
					return;
				}
				obj = unserializeObject(id);
				obj._history_._shift();
				delete localStorage[lsPrefix + id];
				if (obj._history_[0]) obj._history_._add_(obj._history_[0]);
			});
		}
	});
};

server.on('sync', function (serverHash) {
	var clientArray, clientString, client;
	clientArray = keys(localStorage).filter(function (key) {
		if (key[0] !== lsPrefix) return false;
		return !isDelValue(localStorage[key]);
	}).map(function (key) {
		var value = localStorage[key];
		return key.slice(1) + '.' + value.slice(0, value.indexOf('.'));
	}).sort();
	clientString = clientArray.join('|');
	client = String(generateHash(clientString));
	if (serverHash === client) {
		console.log("Sync [Server <-> Client] OK");
		server.emit('sync-confirmed');
		return;
	}
	console.error("Sync error!");
	if (console.groupCollapsed) console.groupCollapsed("Server <-> Client");
	else console.log("Server <-> Client");
	console.log("Server hash:", serverHash);
	console.log("Client hash:", client);
	console.log("Client base:\n", clientArray.join('\n'));
	if (console.groupCollapsed) console.groupEnd();
	send();
});
