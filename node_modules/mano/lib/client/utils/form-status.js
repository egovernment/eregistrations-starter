'use strict';

var global              = require('es5-ext/global')
  , customError         = require('es5-ext/error/custom')
  , validNode           = require('dom-ext/node/valid-node')
  , emit                = require('event-emitter').methods.emit
  , resolveErrorMessage = require('dbjs-error-message')
  , DbjsError           = require('dbjs/_setup/error')
  , unserialize         = require('dbjs/_setup/unserialize/value')
  , unserializeKey      = require('dbjs/_setup/unserialize/key')
  , isDbjsError         = require('dbjs/is-dbjs-error')
  , db                  = require('mano').db

  , isArray = Array.isArray
  , normRe = /[#:\/]/g
  , activeBoxes = [];

var unserializeErrorMock = function (errorMock) {
	var error;
	if (errorMock.object) {
		error = new DbjsError(errorMock.message, errorMock.code, {
			object: unserialize('7' + errorMock.object, db.objects),
			key: unserializeKey(errorMock.key, db.objects),
			stack: errorMock.stack
		});
	}
	error = customError(errorMock.message, errorMock.code, {
		stack: errorMock.stack
	});
	if (errorMock.fieldName) error.fieldName = errorMock.fieldName;
	if (isArray(errorMock.errors)) error.errors = errorMock.errors.map(unserializeErrorMock);
	return error;
};

var resolveMessage = function (error) {
	if (!isDbjsError(error)) return error.message;

	return resolveErrorMessage(error);
};

var showMessage = function (box, message) {
	var text, textBox = box.querySelector('.message-text') || box;
	text = textBox.firstChild;
	if (!text) text = textBox.appendChild(box.ownerDocument.createTextNode(''));
	text.data = message;
	activeBoxes.push(box);
	box.classList.add('active');
};

var logError = function (e) {
	if (e.errors) {
		e.errors.forEach(logError);
		return;
	}
	setTimeout(function () {
		if (e.fieldName) console.error("'" + e.fieldName + "' error:");
		console.error(e.stack || e.message);
	}, 0);
};

exports.showError = function (error) {
	var box, errors, message, name, boxId;
	logError(error);
	validNode(this);
	emit.call(this, 'error', error);
	if (error.errors) {
		errors = error.errors.filter(function (error) {
			var box;
			if (!error.fieldName) return true;
			name = 'error-message-' + error.fieldName.replace(normRe, '-');
			box = this.querySelector('.' + name);
			if (!box) {
				console.warn("No element found: " + name);
				return true;
			}
			showMessage(box, resolveMessage(error));
			return false;
		}, this);
		if (!errors.length) return;
		message = errors.map(function (error) {
			return resolveMessage(error);
		}).join('\n');
	} else {
		if (error.fieldName) {
			name = 'error-message-' + error.fieldName.replace(normRe, '-');
			box = this.querySelector('.' + name);
			if (!box) console.warn("No element found: " + name);
		}
		message = resolveMessage(error);
	}
	if (!box && (boxId = this.getAttribute('data-error-message-box-id'))) {
		box = this.ownerDocument.getElementById(boxId);
		if (!box) console.error("Could not find referenced error message box of id: '" + boxId + "'");
	}
	if (!box) box = this.querySelector('.error-message');
	if (!box) alert(message);
	else showMessage(box, message);
};

global.showPostErrorMessage = function (errorMock) {
	exports.showError.call(this, unserializeErrorMock(errorMock));
};

exports.showSuccess = global.showPostSuccessMessage = function (message) {
	var boxId, box;
	validNode(this);
	if ((boxId = this.getAttribute('data-success-message-box-id'))) {
		box = this.ownerDocument.getElementById(boxId);
		if (!box) console.error("Could not find referenced success message box of id: '" + boxId + "'");
	}
	if (!box) box = this.querySelector('.success-message');
	if (!box) alert(message);
	else showMessage(box, message);
	emit.call(this, 'success', message);
};

exports.clear = global.clearPostMessage = function () {
	var box, textBox;
	while ((box = activeBoxes.shift())) {
		box.classList.remove('active');
		textBox = box.querySelector('.message-text') || box;
		if (!textBox.firstChild) return;
		textBox.firstChild.data = '';
	}
};
