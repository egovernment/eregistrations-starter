'use strict';

var isError     = require('es5-ext/error/is-error')
  , deferred    = require('deferred/deferred')
  , defMap      = require('deferred/ext/array/map')
  , remove      = require('dom-ext/element/#/remove')
  , makeElement = require('dom-ext/document/#/make-element')
  , size        = require('./file-size')

  , isArray = Array.isArray
  , preloader, upload;

require('deferred/ext/promise/finally');

preloader = function (document, file, options) {
	var allowCancel, el = makeElement.bind(document), result = {};

	options = Object(options);
	allowCancel = (options.allowCancel == null) ? true : options.allowCancel;

	result.dom = el('p', { class: 'preloader' },
		el('span', { class: 'label' }, "Loading"),
		el('span', { class: 'info-filename' }, file.name),
		el('span', { class: 'data-left' },
			result.amount = document.createTextNode(size(file.size))),
		el('span', { class: 'progress' },
			el('span', { class: 'progress-bar progress-animate' },
				result.bar = el('span', el('span', "Progress")))),
		allowCancel ?
				(result.cancel = el('a', { class: 'cancel' }, "Cancel")) : null);

	result.setProgress = function (value) {
		result.bar.style.width = value + "%";
	};

	return result;
};

upload = function (file, action) {
	var fd, xhr, def = deferred();

	fd = new FormData();
	xhr = new XMLHttpRequest();
	fd.append('file', file);

	xhr.open('POST', action, true);
	xhr.onload = function (data) {
		if (isError(data)) {
			def.reject(data);
		} else if ((xhr.status < 200) || (xhr.status >= 300)) {
			def.reject(new Error(xhr.responseText));
		} else {
			def.resolve(data && data.currentTarget);
		}
	};
	xhr.onerror = function () { def.reject(new Error("Error occured")); };
	xhr.onabort = function () { def.reject(new Error("Operation aborted")); };
	xhr.upload.onabort = xhr.onabort;
	xhr.upload.onprogress = function (e) {
		def.promise.emit('progress', e);
	};
	xhr.send(fd);
	def.promise.xhr = xhr;
	return def.promise;
};

module.exports = function (files, form, progressContainer) {
	if (!isArray(files)) files = [files];
	return defMap.call(files, function (file) {
		var preloaderData, cancelled, emitter, promise;

		emitter = upload(file, form.action);
		promise = emitter(null, function (e) {
			if (cancelled) return null;
			throw e;
		});

		if (!progressContainer) return promise;

		preloaderData = preloader(form.ownerDocument, file);
		progressContainer.appendChild(preloaderData.dom);
		preloaderData.cancel.setAttribute('onclick', 'onclick');
		preloaderData.cancel.onclick = function () {
			cancelled = true;
			emitter.xhr.abort();
		};
		promise.finally(remove.bind(preloaderData.dom));

		emitter.on('progress', function (e) {
			var progress;
			if (e.lengthComputable) {
				progress = (e.loaded / e.total) * 100;
				preloaderData.setProgress(progress);
				preloaderData.amount.data = size(e.total - e.loaded);
			}
		});
		return promise;
	});
};
