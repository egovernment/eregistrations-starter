'use strict';

var forEach              = require('es5-ext/object/for-each')
  , deferred             = require('deferred')
  , isDbjsError          = require('dbjs/is-dbjs-error')
  , serialize            = require('dbjs/_setup/serialize/value')
  , PostControllerRouter = require('post-controller-router')
  , logError             = require('../lib/server/utils/log-error')
  , validate             = require('../utils/validate')
  , save                 = require('../utils/save')
  , mano                 = require('../')

  , isArray = Array.isArray, stringify = JSON.stringify
  , db = mano.db
  , isDbReleased;

require('dbjs-dom/input')(db);
if (db.Date) require('dbjs-dom/input/date-time/date')(db);
if (db.Time) require('dbjs-dom/input/number/integer/u-integer/time')(db);
if (db.Percentage) require('dbjs-dom/input/number/percentage')(db);
if (db.File) require('dbjs-dom/input/object/file.dom')(db);
if (db.Email) require('dbjs-dom/input/string/string-line/email')(db);

var serializeError = function (error) {
	var errorMock = { message: error.message, code: error.code, stack: error.stack };
	if (error.fieldName) errorMock.fieldName = error.fieldName;
	if (isDbjsError(error)) {
		errorMock.object = error.object && error.object.__id__;
		errorMock.key = serialize(error.key);
	}
	if (isArray(error.errors)) errorMock.errors = error.errors.map(serializeError);
	forEach(error, function (value, name) {
		if (errorMock.hasOwnProperty(name)) return;
		try { stringify(value); } catch (e) { return; }
		errorMock[name] = value;
	});
	return errorMock;
};

var dbRelease = function () {
	if (isDbReleased) return;
	isDbReleased = true;
	db._postponed_ -= 1;
};

module.exports = exports = function (routes) {
	var router = new PostControllerRouter(routes, {
		validate: validate,
		submit: save
	});
	return function (data, referer) {
		var path = this.action.pathname, result, def
		  , uploads, routeError, isRouteError;

		this.dbRelease = dbRelease;
		isDbReleased = false;
		db._postponed_ += 1;
		try {
			result = router.routeEvent(this, path, data);
		} catch (e) {
			routeError = e;
			isRouteError = true;
			result = router.lastRouteData;
		}
		if (!isDbReleased) dbRelease();
		return deferred.resolve(result)(function (data) {
			result = data;
		}, function (e) {
			routeError = e;
			isRouteError = true;
			result = router.lastRouteData;
		})(function () {
			if (!isRouteError && !result) return { statusCode: 404 };
			def = deferred();
			if (isRouteError) def.reject(routeError);
			else def.resolve(result.result);
			if (db.File) {
				uploads = db.File.uploadsInProgress || [];
				db.File.uploadsInProgress = [];
			} else {
				uploads = [];
			}
			return deferred(def.promise, deferred.map(uploads))(function (data) {
				var url;
				data = data[0];
				if (result.conf.redirectUrl) {
					url = result.conf.redirectUrl;
					if (typeof url === 'function') url = url.call(this);
				}
				if (!url) {
					url = referer || '/';
					if (result.conf.formHtmlId) {
						url += '#';
						if (typeof result.conf.formHtmlId === 'function') {
							url += result.conf.formHtmlId.call(this);
						} else {
							url += result.conf.formHtmlId;
						}
					}
				}
				return { url: url, data: data };
			}.bind(this), function (error) {
				var url;
				error = Object(error);
				if ((error.fieldName || error.errors) && !error.statusCode) error.statusCode = 400;
				logError(error);
				url = referer || '/';
				if (result.conf.formHtmlId) {
					url += '#';
					if (typeof result.conf.formHtmlId === 'function') {
						url += result.conf.formHtmlId.call(result.event);
					} else {
						url += result.conf.formHtmlId;
					}
				}
				return {
					error: serializeError(error),
					url: url
				};
			});
		}.bind(this));
	};
};
exports.validate = validate;
exports.submit = save;
