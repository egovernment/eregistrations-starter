'use strict';

var deferred             = require('deferred')
  , PostControllerRouter = require('post-controller-router')
  , sendOk               = require('../lib/server/utils/send-ok')
  , sendJSON             = require('../lib/server/utils/send-json')
  , sendError            = require('../lib/server/utils/send-error')
  , logError             = require('../lib/server/utils/log-error')
  , serializeError       = require('../utils/serialize-error')
  , mano                 = require('mano')

  , db = mano.db;

require('dbjs-dom/input')(db);
if (db.Date) require('dbjs-dom/input/date-time/date')(db);
if (db.Time) require('dbjs-dom/input/number/integer/u-integer/time')(db);
if (db.Percentage) require('dbjs-dom/input/number/percentage')(db);
if (db.File) require('dbjs-dom/input/object/file.dom')(db);
if (db.Email) require('dbjs-dom/input/string/string-line/email')(db);

module.exports = exports = function (routes, legacyPool) {
	var router = new PostControllerRouter(routes);
	return function (data) {
		var req = this.req, res = this.res, path = req._parsedUrl.pathname
		  , isAjax = (req.headers['x-requested-with'] === 'XMLHttpRequest')
		  , result, def, routeError, isRouteError;
		try {
			result = router.routeEvent(this, path, data);
		} catch (e) {
			routeError = e;
			isRouteError = true;
			result = router.lastRouteData;
		}
		return deferred.resolve(result)(function (data) {
			result = data;
		}, function (e) {
			routeError = e;
			isRouteError = true;
			result = router.lastRouteData;
		})(function () {
			if (!isRouteError && !result) return false;
			def = deferred();
			if (isRouteError) def.reject(routeError);
			else def.resolve(result.result);
			return def.promise(function (data) {
				return deferred(mano.registerUserPromise)(function () { return data; });
			})(function (data) {
				var url;
				if (res.finished) return;
				if ((data == null) || req.isHtmlServerRendered || !isAjax) {
					if (result.conf.redirectUrl) {
						url = result.conf.redirectUrl;
						if (typeof url === 'function') url = url.call(this);
					}
					if (!url) {
						url = req.headers.referer || '/';
						if (result.conf.formHtmlId) {
							url += '#';
							if (typeof result.conf.formHtmlId === 'function') {
								url += result.conf.formHtmlId.call(this);
							} else {
								url += result.conf.formHtmlId;
							}
						}
					} else {
						if (data && data.message && (req.isHtmlServerRendered || !isAjax)) {
							legacyPool.postMessages[req.$clientId] = {
								action: path + (req._parsedUrl.search || ''),
								message: String(data.message)
							};
						}
					}
					res.writeHead(303, { Location: url });
					res.end();
					return;
				}
				if (data === true) {
					sendOk.call(res);
					return;
				}
				if (typeof data === 'string') {
					sendOk.call(res, data);
					return;
				}
				sendJSON.call(res, data);
			}.bind(this), function (error) {
				var url;
				error = Object(error);
				if ((error.fieldName || error.errors) && !error.statusCode) error.statusCode = 400;
				if (!req.isHtmlServerRendered && isAjax) {
					sendError.call(res, error);
					return;
				}
				logError(error);
				legacyPool.postMessages[req.$clientId] = {
					action: path + (req._parsedUrl.search || ''),
					error: serializeError(error)
				};
				url = req.headers.referer || '/';
				if (result.conf.formHtmlId) {
					url += '#';
					if (typeof result.conf.formHtmlId === 'function') {
						url += result.conf.formHtmlId.call(result.event);
					} else {
						url += result.conf.formHtmlId;
					}
				}
				res.writeHead(303, { Location: url });
				res.end();
			});
		}.bind(this));
	};
};
