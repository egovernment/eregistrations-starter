'use strict';

var commonLeft, seek;

commonLeft = function (a, b) {
	var l = a.length > b.length ? b.length : a.length, i = 0;
	while (i < l) {
		if (a[i] !== b[i]) return i;
		++i;
	}
	return i;
};

seek = function (path, from, to) {
	var node = from, root = from.ownerDocument;
	while ((node = node.parentNode)) {
		if (node === to) return true;
		if (node === root) return false;
		path.unshift(node);
	}
	return false;
};

module.exports = function (from, to) {
	var path, fPath, tPath, root, index;
	if (from === to) {
		return [];
	}
	root = from.ownerDocument;
	if (root !== to.ownerDocument) {
		throw new Error(
			'Cannot calculate path between nodes from different documents'
		);
	}

	if (seek(fPath = [], from, to)) {
		path = fPath.reverse();
	} else if (seek(tPath = [], to, from)) {
		path = tPath;
	} else {
		index = commonLeft(fPath, tPath);
		path = fPath.slice(index - 1).reverse().concat(tPath.slice(index));
	}
	path.push(to);

	return path;
};
