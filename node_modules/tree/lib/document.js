'use strict';

var create         = Object.create
  , defineProperty = Object.defineProperty;

module.exports = function (node, expose) {
	var sAppendChild = node.appendChild
	  , sRemoveChild = node.removeChild;

	return create(node, {
		implementation:  { value: null, enumerable: expose },
		documentElement: { value: null, enumerable: expose  },
		createNode: { value: function () {
			return create(node, {
				parentNode:    { value: null, enumerable: expose, configurable: true },
				ownerDocument: { value: this, enumerable: expose },
				childNodes:    { value: [],   enumerable: expose },
				firstChild:    { value: null, enumerable: expose, configurable: true },
				lastChild:     { value: null, enumerable: expose, configurable: true }
			});
		}, enumerable: expose },
		appendChild: { value: function (newChild) {
			if (this.childNodes.length) {
				throw new Error("Document can have only one child");
			}
			sAppendChild.call(this, newChild);
			defineProperty(this, 'documentElement',
				{ value: newChild, configurable: true, enumerable: expose });
			return newChild;
		}, enumerable: expose },
		removeChild: { value: function (oldChild) {
			sRemoveChild.call(this, oldChild);
			defineProperty(this, 'documentElement',
				{ value: null, configurable: true, enumerable: expose });
			return oldChild;
		}, enumerable: expose }
	});
};
