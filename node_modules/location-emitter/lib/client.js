'use strict';

var assign             = require('es5-ext/object/assign')
  , d                  = require('d')
  , lazy               = require('d/lazy')
  , ee                 = require('event-emitter')
  , ObservableValue    = require('observable-value')
  , isObservableSymbol = require('observable-value/symbol-is-observable')
  , Query              = require('./_query')

  , names, Location;

names = ['hash', 'host', 'hostname', 'href', 'origin', 'pathname', 'port', 'protocol', 'search'];

Location = function (window) {
	this.window = window;
	this.history = window.history;
	this.onchange = this.onchange.bind(this);
	this.window.addEventListener('popstate', this.onchange, false);
	this.scrollCache = Object.create(null);
	names.forEach(function (name) { this[name] = ''; }, this);
};
ee(Object.defineProperties(Location.prototype, assign({
	root: d('/'),
	update: d(function () {
		names.forEach(function (name) { this[name] = this.window.location[name]; }, this);
	}),
	onchange: d(function () {
		var targetId = this.window.location.hash.slice(1)
		  , hasPathnameChanged = (this.pathname !== this.window.location.pathname)
		  , el;
		if (hasPathnameChanged && this.pathname) {
			if (!this.scrollCache[this.pathname]) this.scrollCache[this.pathname] = {};
			this.scrollCache[this.pathname].x = this.window.scrollX;
			this.scrollCache[this.pathname].y = this.window.scrollY;
		}
		if (hasPathnameChanged || (this.search !== this.window.location.search) ||
				(this.hash !== this.window.location.hash)) {
			this.update();
			this.emit('change', { type: 'change', newValue: this.href });
			this.emit(this.pathname, this.search, this.hash);
		}
		if (hasPathnameChanged && !targetId) {
			if (!this.scrollCache[this.pathname]) this.scrollCache[this.pathname] = { x: 0, y: 0 };
			this.window.scroll(this.scrollCache[this.pathname].x, this.scrollCache[this.pathname].y);
		}
		if (targetId) {
			el = this.window.document.getElementById(targetId);
			if (!el) return;
			if (el.nodeName === 'DIALOG') return;
			if (el.getAttribute('data-hash-auto-scroll') === '0') return;
			el.scrollIntoView(true);
		}
	}),
	goto: d(function (url) {
		if (url == null) url = this.root;
		if (this.window.location.href === url) return;
		this.history.pushState({}, '', url);
		this.onchange();
	}),
	query: d.gs(function () { return new Query(this); }),
	toString: d.gs(function () { return this.href; }),
	value: d.gs(function () { return this.href; },
		function (url) { this.goto(url); })
}, lazy({
	_href: d(function () {
		var observable = new ObservableValue(this.href);
		this.on('change', function () { observable.value = this.href; });
		return observable;
	}),
	_hash: d(function () {
		var observable = new ObservableValue(this.hash);
		this.on('change', function () { observable.value = this.hash; });
		return observable;
	}),
	_pathname: d(function () {
		var observable = new ObservableValue(this.pathname);
		this.on('change', function () { observable.value = this.pathname; });
		return observable;
	}),
	_search: d(function () {
		var observable = new ObservableValue(this.search);
		this.on('change', function () { observable.value = this.search; });
		return observable;
	})
}))));
Object.defineProperty(Location.prototype, isObservableSymbol, d('', true));

module.exports = function (window) { return new Location(window); };
