'use strict';

Error.stackTraceLimit = Infinity;

var clear    = require('es5-ext/object/clear')
  , assign   = require('es5-ext/object/assign')
  , some     = require('es5-ext/object/some')
  , endsWith = require('es5-ext/string/#/ends-with')

  , lineRe = /:(\d+):\d+\)?$/

  , Tracer;

module.exports = Tracer = function (ignored) {
	this.data = {};
	this.ignored = Object(ignored);
	this.cb = this.cb.bind(this);
};

assign(Tracer.prototype, {
	total: 0,
	cb: function (id) {
		if (this.postponed) return;
		var line, stack = (new Error()).stack.split('\n').slice(3);
		++this.total;
		stack.some(function (str) {
			var match = str.match(lineRe);
			if (!match) {
				if (endsWith.call(str, '(<anonymous>)')) return false;
				if (endsWith.call(str, '(native)')) return false;
				console.log("ERROR", JSON.stringify(str));
			}
			str = match[1];
			if (this.ignored[str]) return false;
			return (line = str.trim());
		}, this);
		if (!this.data[line]) this.data[line] = [];
		this.data[line].push({ id: id, stack: stack.join('\n') });
	},
	top: function (count) {
		var data = {};
		count = Math.max(count >>> 0, 10) - 2;
		some(this.data, function (data, line, self, index) {
			this[line] = data;
			if (index > count) return true;
		}, data, function (a, b) {
			return this[b].length - this[a].length;
		});
		return data;
	},
	stop: function () { this.postponed = true; },
	clear: function () {
		clear(this.data);
		this.total = 0;
	}
});
